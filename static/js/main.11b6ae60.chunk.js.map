{"version":3,"sources":["context/GameInfo/GameInfoContext.js","components/GameInfoForm/GameInfoForm.js","components/layout/Navbar/Navbar.js","components/Cell/Cell.js","components/Utils/GameConstans.js","components/FlagCounter/FlagCouner.js","components/Alert/Alert.js","components/GameBoard/GameBoard.js","components/Utils/UtilMethods.js","context/GameInfo/GameInfoReducer.js","context/types.js","context/GameInfo/GameInfoState.js","MinesweeperApp.js","index.js"],"names":["GameInfoContext","createContext","GameInfoForm","gameInfoContext","useContext","useState","totalRows","setTotalRows","totalCols","setTotalCols","totalMines","setTotalMines","onSubmit","e","preventDefault","parseInt","className","htmlFor","id","type","value","onChange","target","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Cell","cellRow","cellCol","isMine","mineNeighbours","isRevealed","isFlagged","isLostTrigger","clickHandler","style","width","height","background","color","onClick","opacity","cursor","FlagCouner","remainingFlags","Alert","alert","header","msg","GameBoard","board","setBoard","gameFreeze","setGameFreeze","setRemainingFlags","numberOfCorrectFlags","setNumberOfCorrectFlags","resetGame","console","log","i","push","j","mineCounter","randomRow","Math","floor","random","randomCol","cell","countNeighboursMines","row","col","totalNeighboursMines","xOffSet","yOffSet","map","_","createBoard","setAlert","useEffect","event","shiftKey","toggleFlag","currentCell","triggerAlert","revealCell","updatedBoard","originCellRow","originCellCol","spreadCell","originCell","originRow","originCol","cellToCheck","timeout","setTimeout","gridTemplateColumns","key","state","action","payload","GameInfoState","props","initialState","useReducer","GameInfoReducer","dispatch","Provider","newTotalRows","newTotalCols","newTotalMines","children","MinesweeperApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11b6ae60.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GameInfoContext = createContext();\n\nexport default GameInfoContext;\n","import React, { useState, useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst GameInfoForm = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n\n  const [totalRows, setTotalRows] = useState(gameInfoContext.totalRows);\n  const [totalCols, setTotalCols] = useState(gameInfoContext.totalCols);\n  const [totalMines, setTotalMines] = useState(gameInfoContext.totalMines);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (totalRows === \"\") {\n      //alertContext.setAlert('Please enter something', 'light');\n    } else {\n      gameInfoContext.setTotalRows(parseInt(totalRows));\n      gameInfoContext.setTotalCols(parseInt(totalCols));\n      gameInfoContext.setTotalMines(parseInt(totalMines));\n    }\n  };\n\n  const onChangeRows = (e) => setTotalRows(e.target.value);\n  const onChangeCols = (e) => setTotalCols(e.target.value);\n  const onChangeMines = (e) => setTotalMines(e.target.value);\n\n  return (\n    <form onSubmit={onSubmit} className='form-inline mt-2 mt-md-0'>\n      <div className='form-row col-sm-10 ml-auto'>\n        <div className='form-group col-sm-3'>\n          <label htmlFor='totalRowsInput' className='text-light mr-2'>\n            Rows:\n          </label>\n          <input\n            id='totalRowsInput'\n            className='form-control mr-sm-2 col-sm-5'\n            type='number'\n            value={totalRows}\n            onChange={onChangeRows}\n          />\n        </div>\n        <div className='form-group col-sm-3'>\n          <label htmlFor='totalColsInput' className='text-light mr-2'>\n            Columns:\n          </label>\n          <input\n            id='totalColsInput'\n            className='form-control mr-sm-2 col-sm-5'\n            type='number'\n            value={totalCols}\n            onChange={onChangeCols}\n          />\n        </div>\n        <div className='form-group col-sm-3'>\n          <label htmlFor='totalMinesInput' className='text-light mr-2'>\n            Mines:\n          </label>\n          <input\n            id='totalMinesInput'\n            className='form-control mr-sm-2 col-sm-5'\n            type='number'\n            value={totalMines}\n            onChange={onChangeMines}\n          />\n        </div>\n        <button className='btn btn-success my-2 my-sm-0 mr-3' type='submit'>\n          New Game\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default GameInfoForm;\n","import React from \"react\";\nimport GameInfoForm from \"../../GameInfoForm/GameInfoForm\";\n// import { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <nav className='navbar navbar-expand-md navbar-dark bg-dark'>\n      <a className='navbar-brand' href='#'>\n        <i className='fa fa-bomb' /> ReactJS Minesweeper\n      </a>\n      <button\n        className='navbar-toggler collapsed'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarCollapse'\n        aria-controls='navbarCollapse'\n        aria-expanded='false'\n        aria-label='Toggle navigation'\n      >\n        <span className='navbar-toggler-icon'></span>\n      </button>\n      <div className='navbar-collapse collapse' id='navbarCollapse'>\n        <GameInfoForm />\n        <button className='btn btn-outline-success my-2 my-sm-0' type='submit'>\n          <i className='fa fa-eye' /> Reveal All Cells\n        </button>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, Fragment } from \"react\";\nimport \"./Cell.css\";\nimport { CELL_SIZE } from \"../Utils/GameConstans\";\n\nconst Cell = ({\n  cellRow,\n  cellCol,\n  isMine,\n  mineNeighbours,\n  isRevealed,\n  isFlagged,\n  isLostTrigger,\n  clickHandler,\n}) => {\n  const renderCell = () => {\n    if (isMine) {\n      return <i className='fa fa-bomb fa-md' style={{ color: \"#000\" }} />;\n    } else if (isFlagged) {\n      return <i className='fa fa-times' style={{ color: \"#ffb000\" }}></i>;\n    } else if (mineNeighbours > 0) {\n      return <Fragment>{mineNeighbours}</Fragment>;\n    }\n    return null;\n  };\n\n  const getBackground = () => {\n    if (isLostTrigger) {\n      return \"#cc2f2f\";\n    }\n    if (isMine) {\n      return \"#fff\";\n    }\n    return null;\n  };\n\n  return (\n    <div\n      className='game-cell'\n      style={{\n        width: CELL_SIZE,\n        height: CELL_SIZE,\n        background: getBackground(),\n      }}\n    >\n      {renderCell()}\n      <button\n        className='btn btn-primary game-btn'\n        onClick={(e) => clickHandler(e, cellRow, cellCol)}\n        style={{\n          opacity: isRevealed ? 0 : 1,\n          cursor: isRevealed ? \"auto\" : \"pointer\",\n        }}\n      >\n        {isFlagged ? <i className='fa fa-flag' /> : null}\n      </button>\n    </div>\n  );\n};\n\nexport default Cell;\n","export const DEFAULT_TOTAL_ROWS = 10;\nexport const DEFAULT_TOTAL_COLS = 10;\nexport const DEFAULT_TOTAL_MINES = 10;\n\nexport const CELL_SIZE = 30;\n","import React, { Fragment } from \"react\";\n\nconst FlagCouner = ({ remainingFlags }) => {\n  return (\n    <Fragment>\n      <span className='mr-1'>{remainingFlags}</span>\n      <i className='fa fa-flag mb-3' />\n    </Fragment>\n  );\n};\n\nexport default FlagCouner;\n","import React from \"react\";\n\nconst Alert = ({ alert }) => {\n  return (\n    alert !== null && (\n      <div className='bs-component'>\n        <div className={`alert alert-${alert.type}`}>\n          <strong>{alert.header}</strong> {alert.msg}\n        </div>\n      </div>\n    )\n  );\n};\n\nexport default Alert;\n","import React, {\n  Profiler,\n  useState,\n  useEffect,\n  useContext,\n  Fragment,\n} from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport Cell from \"../Cell/Cell\";\nimport \"./GameBoard.css\";\nimport { CELL_SIZE } from \"../Utils/GameConstans\";\nimport { createBoard } from \"../Utils/UtilMethods\";\nimport FlagCounter from \"../FlagCounter/FlagCouner\";\nimport Alert from \"../Alert/Alert\";\n\nconst GameBoard = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const { totalRows, totalCols, totalMines } = gameInfoContext;\n\n  const [board, setBoard] = useState([]);\n  const [gameFreeze, setGameFreeze] = useState(false);\n\n  const [remainingFlags, setRemainingFlags] = useState(totalMines);\n  const [numberOfCorrectFlags, setNumberOfCorrectFlags] = useState(0);\n\n  const resetGame = () => {\n    setBoard(createBoard(totalRows, totalCols, totalMines));\n    setRemainingFlags(totalMines);\n    setGameFreeze(false);\n    setAlert(null);\n  };\n  useEffect(() => resetGame(), [totalRows, totalCols, totalMines]);\n\n  let totalCells = 300;\n  let cellWithAndHeight;\n\n  if (totalCells < 10000) {\n    cellWithAndHeight = 70;\n  } else if (totalCells < 20000) {\n    cellWithAndHeight = 45;\n  } else {\n    cellWithAndHeight = 30;\n  }\n\n  const revealAllMines = () => {\n    let updatedBoard = [...board];\n    return updatedBoard.map((row) =>\n      row.map((cell) => {\n        if (cell.isMine && cell.isFlagged) {\n          return cell;\n        } else if (cell.isMine || (cell.isFlagged && !cell.isMine)) {\n          return {\n            ...cell,\n            isRevealed: true,\n          };\n        } else {\n          return cell;\n        }\n      })\n    );\n  };\n\n  const clickHandler = (event, cellRow, cellCol) => {\n    if (gameFreeze) {\n      return;\n    }\n    // Handle Shift + Click\n    if (event.shiftKey) {\n      toggleFlag(cellRow, cellCol);\n      return;\n    }\n    // If Cell Is a Mine\n    const currentCell = board[cellRow][cellCol];\n    if (currentCell.isMine) {\n      triggerAlert(\n        \"Oy Vey!\",\n        <span>\n          It's a mine\n          <i className='fa fa-bomb ml-1' />\n        </span>,\n        \"danger\"\n      );\n      currentCell.isLostTrigger = true;\n      setBoard(revealAllMines());\n      setGameFreeze(true);\n      return;\n    }\n    // Reveal Cell\n    if (!currentCell.isFlagged) {\n      revealCell(cellRow, cellCol);\n    }\n  };\n\n  useEffect(() => {\n    // Check if it's a win\n    if (numberOfCorrectFlags === totalMines) {\n      triggerAlert(\n        \"Well Done!\",\n        <span>\n          You did it!\n          <i className='fa fa-trophy ml-1' />\n        </span>,\n        \"success\"\n      );\n      setGameFreeze(true);\n    }\n  }, [numberOfCorrectFlags]);\n\n  const toggleFlag = (row, col) => {\n    let updatedBoard = [...board];\n    const currentCell = updatedBoard[row][col];\n    if (currentCell.isFlagged) {\n      // Remove Flag\n      setRemainingFlags(remainingFlags + 1);\n      if (currentCell.isMine) {\n        setNumberOfCorrectFlags(numberOfCorrectFlags - 1);\n      }\n    } else {\n      // Set New Flag\n      if (remainingFlags > 0) {\n        setRemainingFlags(remainingFlags - 1);\n        if (currentCell.isMine) {\n          setNumberOfCorrectFlags(numberOfCorrectFlags + 1);\n        }\n      } else {\n        triggerAlert(\n          \"Out Of Flags!\",\n          <span>\n            Try to remove a flag before adding a new one\n            <i className='fa fa-flag ml-1' />\n          </span>,\n          \"secondary\",\n          5000\n        );\n        return;\n      }\n    }\n    updatedBoard[row][col].isFlagged = !updatedBoard[row][col].isFlagged;\n    setBoard(updatedBoard);\n  };\n\n  const revealCell = (originCellRow, originCellCol) => {\n    let updatedBoard = [...board];\n    let currentCell = updatedBoard[originCellRow][originCellCol];\n    currentCell.isRevealed = true;\n    if (currentCell.mineNeighbours === 0) {\n      updatedBoard = spreadCell(updatedBoard, currentCell);\n    }\n    setBoard(updatedBoard);\n  };\n\n  const spreadCell = (updatedBoard, originCell) => {\n    const originRow = originCell.cellRow;\n    const originCol = originCell.cellCol;\n    for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n      let cellRow = originRow + xOffSet;\n      if (cellRow < 0 || cellRow >= totalRows) continue;\n      for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n        let cellCol = originCol + yOffSet;\n        if (cellCol < 0 || cellCol >= totalCols) continue;\n        let cellToCheck = updatedBoard[cellRow][cellCol];\n        if (\n          !cellToCheck.isRevealed &&\n          !cellToCheck.isMine &&\n          !cellToCheck.isFlagged\n        ) {\n          revealCell(cellToCheck.cellRow, cellToCheck.cellCol);\n        }\n      }\n    }\n    return updatedBoard;\n  };\n\n  const renderBoard = () =>\n    board.map((row, i) =>\n      row.map((cell, j) => (\n        <div key={`${i},${j}`}>\n          <Cell\n            cellRow={i}\n            cellCol={j}\n            isMine={cell.isMine}\n            mineNeighbours={cell.mineNeighbours}\n            isRevealed={cell.isRevealed}\n            isFlagged={cell.isFlagged}\n            isLostTrigger={cell.isLostTrigger}\n            clickHandler={clickHandler}\n          />\n        </div>\n      ))\n    );\n\n  const [alert, setAlert] = useState(null);\n  const triggerAlert = (header, msg, type, timeout) => {\n    setAlert({\n      header,\n      msg,\n      type,\n    });\n    if (timeout > 0) {\n      setTimeout(() => setAlert(null), timeout);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Alert alert={alert} />\n      <div className='container'>\n        <FlagCounter remainingFlags={remainingFlags} />\n      </div>\n      <div\n        className='game-board'\n        style={{\n          gridTemplateColumns: `repeat(${totalCols}, ${CELL_SIZE}px)`,\n        }}\n      >\n        {renderBoard()}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default GameBoard;\n","export const createBoard = (totalRows, totalCols, totalMines) => {\n  let board = [];\n  console.log(\n    `createBoard (utils)! Building new board: ${totalRows}X${totalCols} with ${totalMines} mines.`\n  );\n\n  // Init board cells\n  for (let i = 0; i < totalRows; i++) {\n    board.push([]);\n    for (let j = 0; j < totalCols; j++) {\n      board[i].push({\n        cellRow: i,\n        cellCol: j,\n        isRevealed: false,\n        isMine: false,\n        isFlagged: false,\n        isLostTrigger: false,\n        mineNeighbours: 0,\n      });\n    }\n  }\n\n  // Set mines\n  let mineCounter = 0;\n  while (mineCounter < totalMines) {\n    const randomRow = Math.floor(Math.random() * totalRows);\n    const randomCol = Math.floor(Math.random() * totalCols);\n    const cell = board[randomRow][randomCol];\n    if (!cell.isMine) {\n      board[randomRow][randomCol] = {\n        ...cell,\n        isMine: true,\n      };\n      mineCounter++;\n    }\n\n    const countNeighboursMines = (row, col) => {\n      if (board[row][col].isMine) {\n        return -1;\n      }\n      let totalNeighboursMines = 0;\n      for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n        let cellRow = row + xOffSet;\n        if (cellRow < 0 || cellRow >= totalRows) continue;\n        for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n          let cellCol = col + yOffSet;\n          if (cellCol < 0 || cellCol >= totalCols) continue;\n          if (board[cellRow][cellCol].isMine) {\n            totalNeighboursMines++;\n          }\n        }\n      }\n      return totalNeighboursMines;\n    };\n\n    // Set neightbours mines values\n    board.map((row, i) =>\n      row.map(\n        (_, j) =>\n          (board[i][j] = {\n            ...board[i][j],\n            mineNeighbours: countNeighboursMines(i, j),\n          })\n      )\n    );\n  }\n  return board;\n};\n","import { SET_TOTAL_ROWS, SET_TOTAL_COLS, SET_TOTAL_MINES } from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_TOTAL_ROWS:\n      return {\n        ...state,\n        totalRows: action.payload,\n      };\n    case SET_TOTAL_COLS:\n      return {\n        ...state,\n        totalCols: action.payload,\n      };\n    case SET_TOTAL_MINES:\n      return {\n        ...state,\n        totalMines: action.payload,\n      };\n  }\n};\n","export const SET_TOTAL_ROWS = \"SET_TOTAL_ROWS\";\nexport const SET_TOTAL_COLS = \"SET_TOTAL_COLS\";\nexport const SET_TOTAL_MINES = \"SET_TOTAL_MINES\";\n","import React, { useReducer } from \"react\";\nimport GameInfoContext from \"./GameInfoContext\";\nimport GameInfoReducer from \"./GameInfoReducer\";\nimport { SET_TOTAL_ROWS, SET_TOTAL_COLS, SET_TOTAL_MINES } from \"../types\";\nimport {\n  DEFAULT_TOTAL_ROWS,\n  DEFAULT_TOTAL_COLS,\n  DEFAULT_TOTAL_MINES,\n} from \"../../components/Utils/GameConstans\";\n// import GameInfoForm from \"../../components/GameInfoForm\";\n\nconst GameInfoState = (props) => {\n  // Default Values\n  const initialState = {\n    totalRows: DEFAULT_TOTAL_ROWS,\n    totalCols: DEFAULT_TOTAL_COLS,\n    totalMines: DEFAULT_TOTAL_MINES,\n  };\n  const [state, dispatch] = useReducer(GameInfoReducer, initialState);\n\n  const setTotalRows = (newTotalRows) =>\n    dispatch({ type: SET_TOTAL_ROWS, payload: newTotalRows });\n  const setTotalCols = (newTotalCols) =>\n    dispatch({ type: SET_TOTAL_COLS, payload: newTotalCols });\n  const setTotalMines = (newTotalMines) =>\n    dispatch({ type: SET_TOTAL_MINES, payload: newTotalMines });\n\n  return (\n    <GameInfoContext.Provider\n      value={{\n        totalRows: state.totalRows,\n        totalCols: state.totalCols,\n        totalMines: state.totalMines,\n        setTotalRows,\n        setTotalCols,\n        setTotalMines,\n      }}\n    >\n      {props.children}\n    </GameInfoContext.Provider>\n  );\n};\n\nexport default GameInfoState;\n","import React from \"react\";\nimport Navbar from \"./components/layout/Navbar/Navbar\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport GameInfoState from \"./context/GameInfo/GameInfoState\";\nimport \"./MinesweeperApp.css\";\n\nconst MinesweeperApp = () => {\n  const setGameInfo = () => {};\n  return (\n    <GameInfoState>\n      <div className='minesweeperApp'>\n        <Navbar />\n        <div className='container jumbotron text-center mt-5'>\n          <div className='container game-board-container'>\n            <GameBoard />\n          </div>\n        </div>\n      </div>\n    </GameInfoState>\n  );\n};\n\nexport default MinesweeperApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MinesweeperApp from \"./MinesweeperApp\";\n\nReactDOM.render(<MinesweeperApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}