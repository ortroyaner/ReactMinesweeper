{"version":3,"sources":["context/GameInfo/GameInfoContext.js","components/RevealMode/RevealMode.js","components/layout/Navbar/Navbar.js","components/Cell/Cell.js","components/Utils/GameConstans.js","components/FlagCounter/FlagCouner.js","components/Alert/Alert.js","components/GameBoard/GameBoard.js","components/Utils/UtilMethods.js","context/GameInfo/GameInfoReducer.js","context/types.js","context/GameInfo/GameInfoState.js","components/GameInfoForm/GameInfoForm.js","MinesweeperApp.js","index.js"],"names":["GameInfoContext","createContext","RevealMode","gameInfoContext","useContext","isRevealMode","className","onClick","setIsRevealMode","Navbar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Cell","cellRow","cellCol","isMine","mineNeighbours","isRevealed","isFlagged","isLostTrigger","missedMark","clickHandler","style","width","height","color","e","opacity","cursor","display","FlagCouner","remainingFlags","prototype","PropTypes","number","Alert","alert","header","msg","GameBoard","totalRows","totalCols","totalMines","boardTimestamp","useState","board","setBoard","gameFreeze","setGameFreeze","setRemainingFlags","numberOfCorrectFlags","setNumberOfCorrectFlags","useEffect","i","push","j","mineCounter","randomRow","Math","floor","random","randomCol","cell","countNeighboursMines","row","col","totalNeighboursMines","xOffSet","yOffSet","map","_","createBoard","setAlert","triggerAlert","event","currentCell","shiftKey","toggleFlag","revealCell","updatedBoard","originCellRow","originCellCol","revealNeighbours","originCell","originRow","originCol","cellToCheck","timeout","setTimeout","gridTemplateColumns","key","state","action","payload","GameInfoState","props","initialState","Date","getTime","useReducer","GameInfoReducer","dispatch","Provider","value","setTotalRows","newTotalRows","setTotalCols","newTotalCols","setTotalMines","newTotalMines","setBoardTimestamp","newTimestamp","newIsRevealMode","children","GameInfoForm","onSubmit","preventDefault","parseInt","aria-hidden","min","max","onChange","target","MinesweeperApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c3297800.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GameInfoContext = createContext();\n\nexport default GameInfoContext;\n","import React, { useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst RevealMode = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.isRevealMode;\n  const toggleRevealMode = () => {\n    gameInfoContext.setIsRevealMode(!isRevealMode);\n  };\n\n  return (\n    <button\n      className={`btn btn-outline-success my-2 my-sm-0 ml-auto ${\n        isRevealMode ? \"active\" : \"\"\n      }`}\n      onClick={toggleRevealMode}\n    >\n      <i className='fa fa-eye' /> Reveal All Cells\n    </button>\n  );\n};\n\nexport default RevealMode;\n","import React from \"react\";\nimport RevealMode from \"../../RevealMode/RevealMode\";\n\nconst Navbar = () => {\n  return (\n    <nav className='navbar navbar-expand-md navbar-dark bg-dark'>\n      <a className='navbar-brand' href='/#'>\n        <i className='fa fa-bomb' /> ReactJS Minesweeper\n      </a>\n      <button\n        className='navbar-toggler collapsed'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarCollapse'\n        aria-controls='navbarCollapse'\n        aria-expanded='false'\n        aria-label='Toggle navigation'\n      >\n        <span className='navbar-toggler-icon'></span>\n      </button>\n      <div className='navbar-collapse collapse' id='navbarCollapse'>\n        <RevealMode />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useContext, Fragment } from \"react\";\nimport \"./Cell.css\";\nimport { CELL_SIZE } from \"../Utils/GameConstans\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport PropTypes from \"prop-types\";\n\nconst Cell = ({\n  cellRow,\n  cellCol,\n  isMine,\n  mineNeighbours,\n  isRevealed,\n  isFlagged,\n  isLostTrigger,\n  missedMark,\n  clickHandler,\n}) => {\n  const renderCell = () => {\n    if (isMine) {\n      return <i className='fa fa-bomb fa-md' />;\n    } else if (isFlagged) {\n      return <i className='fa fa-times' style={{ color: \"#ffb000\" }}></i>;\n    } else if (mineNeighbours > 0) {\n      return <Fragment>{mineNeighbours}</Fragment>;\n    }\n    return null;\n  };\n\n  const getType = () => {\n    if (isLostTrigger) {\n      return \"danger\";\n    }\n    if (missedMark) {\n      return \"secondary\";\n    }\n    return \"primary\";\n  };\n\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.isRevealMode;\n\n  return (\n    <div\n      className={`game-cell alert alert-${getType()}`}\n      style={{\n        width: CELL_SIZE,\n        height: CELL_SIZE,\n      }}\n    >\n      <span>{renderCell()}</span>\n      <button\n        className='btn btn-warning game-btn'\n        onClick={(e) => clickHandler(e, cellRow, cellCol)}\n        style={{\n          opacity: isRevealed ? 0 : isRevealMode ? 0.5 : 1,\n          cursor: isRevealed ? \"auto\" : \"pointer\",\n          display: \"block\",\n        }}\n      >\n        {isFlagged ? <i className='fa fa-flag' /> : null}\n      </button>\n    </div>\n  );\n};\n\nCell.propTypes = {\n  cellRow: PropTypes.number,\n  cellCol: PropTypes.number,\n  isMine: PropTypes.bool,\n  mineNeighbours: PropTypes.number,\n  isRevealed: PropTypes.bool,\n  isFlagged: PropTypes.bool,\n  isLostTrigger: PropTypes.bool,\n  missedMark: PropTypes.bool,\n  clickHandler: PropTypes.func,\n};\n\nexport default Cell;\n","export const DEFAULT_TOTAL_ROWS = 10;\nexport const DEFAULT_TOTAL_COLS = 10;\nexport const DEFAULT_TOTAL_MINES = 10;\n\nexport const CELL_SIZE = 30;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FlagCouner = ({ remainingFlags }) => {\n  return (\n    <Fragment>\n      <div className='bs-component'>\n        <div className='alert'>\n          <h3 className='mr-1'>\n            <strong>{remainingFlags}</strong>\n            <i className='fa fa-flag ml-1' />\n          </h3>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nFlagCouner.prototype = {\n  remainingFlags: PropTypes.number,\n};\n\nexport default FlagCouner;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Alert = ({ alert }) => {\n  return (\n    alert !== null && (\n      <div className='bs-component'>\n        <div className={`alert alert-${alert.type}`}>\n          <strong>{alert.header}</strong> {alert.msg}\n        </div>\n      </div>\n    )\n  );\n};\n\nAlert.propTypes = {\n  alert: PropTypes.object,\n};\n\nexport default Alert;\n","import React, { useState, useEffect, useContext, Fragment } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport Cell from \"../Cell/Cell\";\nimport \"./GameBoard.css\";\nimport { CELL_SIZE } from \"../Utils/GameConstans\";\nimport { createBoard } from \"../Utils/UtilMethods\";\nimport FlagCounter from \"../FlagCounter/FlagCouner\";\nimport Alert from \"../Alert/Alert\";\n\nconst GameBoard = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const { totalRows, totalCols, totalMines, boardTimestamp } = gameInfoContext;\n  const [board, setBoard] = useState([]);\n  const [gameFreeze, setGameFreeze] = useState(false);\n  const [remainingFlags, setRemainingFlags] = useState(totalMines);\n  const [numberOfCorrectFlags, setNumberOfCorrectFlags] = useState(0);\n\n  useEffect(() => {\n    // Reset Game\n    (() => {\n      setBoard(createBoard(totalRows, totalCols, totalMines));\n      setRemainingFlags(totalMines);\n      setNumberOfCorrectFlags(0);\n      setGameFreeze(false);\n      setAlert(null);\n    })();\n  }, [totalRows, totalCols, totalMines, boardTimestamp]);\n\n  // Check if it's a win\n  useEffect(() => {\n    if (numberOfCorrectFlags === totalMines) {\n      triggerAlert(\n        \"Well Done!\",\n        <span>\n          You did it!\n          <i className='fa fa-trophy ml-1' />\n        </span>,\n        \"success\"\n      );\n      setGameFreeze(true);\n    }\n  }, [numberOfCorrectFlags, totalMines]);\n\n  const revealAllMines = () => {\n    let updatedBoard = [...board];\n    return updatedBoard.map((row) =>\n      row.map((cell) => {\n        if (\n          (cell.isMine && !cell.isFlagged) ||\n          (cell.isFlagged && !cell.isMine)\n        ) {\n          return {\n            ...cell,\n            isRevealed: true,\n            missedMark: true,\n          };\n        } else {\n          return cell;\n        }\n      })\n    );\n  };\n\n  const clickHandler = (event, cellRow, cellCol) => {\n    const currentCell = board[cellRow][cellCol];\n    if (gameFreeze || currentCell.isRevealed) {\n      return;\n    }\n    // Handle Shift + Click\n    if (event.shiftKey) {\n      toggleFlag(cellRow, cellCol);\n      return;\n    }\n    // Handle Click Only\n    if (currentCell.isFlagged) {\n      return;\n    }\n    if (currentCell.isMine) {\n      triggerAlert(\n        \"Oy Vey!\",\n        <span>\n          It's a mine\n          <i className='fa fa-bomb ml-1' />\n        </span>,\n        \"danger\"\n      );\n      currentCell.isLostTrigger = true;\n      setBoard(revealAllMines());\n      setGameFreeze(true);\n      return;\n    }\n    if (!currentCell.isFlagged) {\n      revealCell(cellRow, cellCol);\n    }\n  };\n\n  const toggleFlag = (row, col) => {\n    let updatedBoard = [...board];\n    const currentCell = updatedBoard[row][col];\n    if (currentCell.isFlagged) {\n      // Remove Flag\n      setRemainingFlags(remainingFlags + 1);\n      if (currentCell.isMine) {\n        setNumberOfCorrectFlags(numberOfCorrectFlags - 1);\n      }\n    } else {\n      // Set New Flag\n      if (remainingFlags > 0) {\n        setRemainingFlags(remainingFlags - 1);\n        if (currentCell.isMine) {\n          setNumberOfCorrectFlags(numberOfCorrectFlags + 1);\n        }\n      } else {\n        triggerAlert(\n          \"Out Of Flags!\",\n          <span>\n            Try to remove a flag before adding a new one\n            <i className='fa fa-flag ml-1' />\n          </span>,\n          \"secondary\",\n          5000\n        );\n        return;\n      }\n    }\n    // Toggle flag indication\n    updatedBoard[row][col].isFlagged = !updatedBoard[row][col].isFlagged;\n    setBoard(updatedBoard);\n  };\n\n  const revealCell = (originCellRow, originCellCol) => {\n    let updatedBoard = [...board];\n    let currentCell = updatedBoard[originCellRow][originCellCol];\n    currentCell.isRevealed = true;\n    if (currentCell.mineNeighbours === 0) {\n      updatedBoard = revealNeighbours(updatedBoard, currentCell);\n    }\n    setBoard(updatedBoard);\n  };\n\n  const revealNeighbours = (updatedBoard, originCell) => {\n    const originRow = originCell.cellRow;\n    const originCol = originCell.cellCol;\n    for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n      let cellRow = originRow + xOffSet;\n      if (cellRow < 0 || cellRow >= totalRows) continue;\n      for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n        let cellCol = originCol + yOffSet;\n        if (cellCol < 0 || cellCol >= totalCols) continue;\n        let cellToCheck = updatedBoard[cellRow][cellCol];\n        if (\n          !cellToCheck.isRevealed &&\n          !cellToCheck.isMine &&\n          !cellToCheck.isFlagged\n        ) {\n          revealCell(cellToCheck.cellRow, cellToCheck.cellCol);\n        }\n      }\n    }\n    return updatedBoard;\n  };\n\n  const renderBoard = () =>\n    board.map((row, i) =>\n      row.map((cell, j) => (\n        <div key={`${i},${j}`}>\n          <Cell\n            cellRow={i}\n            cellCol={j}\n            isMine={cell.isMine}\n            mineNeighbours={cell.mineNeighbours}\n            isRevealed={cell.isRevealed}\n            isFlagged={cell.isFlagged}\n            isLostTrigger={cell.isLostTrigger}\n            missedMark={cell.missedMark}\n            clickHandler={clickHandler}\n          />\n        </div>\n      ))\n    );\n\n  const [alert, setAlert] = useState(null);\n  const triggerAlert = (header, msg, type, timeout) => {\n    setAlert({\n      header,\n      msg,\n      type,\n    });\n    if (timeout > 0) {\n      setTimeout(() => setAlert(null), timeout);\n    }\n  };\n\n  return (\n    <Fragment>\n      <Alert alert={alert} />\n      <div className='container'>\n        <FlagCounter remainingFlags={remainingFlags} />\n      </div>\n      <div\n        className='game-board'\n        style={{\n          gridTemplateColumns: `repeat(${totalCols}, ${CELL_SIZE}px)`,\n        }}\n      >\n        {renderBoard()}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default GameBoard;\n","export const createBoard = (totalRows, totalCols, totalMines) => {\n  let board = [];\n  // Init board cells\n  for (let i = 0; i < totalRows; i++) {\n    board.push([]);\n    for (let j = 0; j < totalCols; j++) {\n      board[i].push({\n        cellRow: i,\n        cellCol: j,\n        isRevealed: false,\n        isMine: false,\n        isFlagged: false,\n        isLostTrigger: false,\n        missedMark: false,\n        mineNeighbours: 0,\n      });\n    }\n  }\n\n  // Set mines\n  let mineCounter = 0;\n  while (mineCounter < totalMines) {\n    const randomRow = Math.floor(Math.random() * totalRows);\n    const randomCol = Math.floor(Math.random() * totalCols);\n    const cell = board[randomRow][randomCol];\n    if (!cell.isMine) {\n      board[randomRow][randomCol] = {\n        ...cell,\n        isMine: true,\n      };\n      mineCounter++;\n    }\n\n    const countNeighboursMines = (row, col) => {\n      if (board[row][col].isMine) {\n        return -1;\n      }\n      let totalNeighboursMines = 0;\n      for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n        let cellRow = row + xOffSet;\n        if (cellRow < 0 || cellRow >= totalRows) continue;\n        for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n          let cellCol = col + yOffSet;\n          if (cellCol < 0 || cellCol >= totalCols) continue;\n          if (board[cellRow][cellCol].isMine) {\n            totalNeighboursMines++;\n          }\n        }\n      }\n      return totalNeighboursMines;\n    };\n\n    // Set neightbours mines values\n    board.map((row, i) =>\n      row.map(\n        (_, j) =>\n          (board[i][j] = {\n            ...board[i][j],\n            mineNeighbours: countNeighboursMines(i, j),\n          })\n      )\n    );\n  }\n  return board;\n};\n","import {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_TOTAL_ROWS:\n      return {\n        ...state,\n        totalRows: action.payload,\n      };\n    case SET_TOTAL_COLS:\n      return {\n        ...state,\n        totalCols: action.payload,\n      };\n    case SET_TOTAL_MINES:\n      return {\n        ...state,\n        totalMines: action.payload,\n      };\n    case SET_BOARD_TIMESTAMP:\n      return {\n        ...state,\n        boardTimestamp: action.payload,\n      };\n    case SET_IS_REVEAL_MODE:\n      return {\n        ...state,\n        isRevealMode: action.payload,\n      };\n    default:\n      return;\n  }\n};\n","export const SET_TOTAL_ROWS = \"SET_TOTAL_ROWS\";\nexport const SET_TOTAL_COLS = \"SET_TOTAL_COLS\";\nexport const SET_TOTAL_MINES = \"SET_TOTAL_MINES\";\nexport const SET_BOARD_TIMESTAMP = \"SET_BOARD_TIMESTAMP\";\nexport const SET_IS_REVEAL_MODE = \"SET_IS_REVEAL_MODE\";\n","import React, { useReducer } from \"react\";\nimport GameInfoContext from \"./GameInfoContext\";\nimport GameInfoReducer from \"./GameInfoReducer\";\nimport {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\nimport {\n  DEFAULT_TOTAL_ROWS,\n  DEFAULT_TOTAL_COLS,\n  DEFAULT_TOTAL_MINES,\n} from \"../../components/Utils/GameConstans\";\n// import GameInfoForm from \"../../components/GameInfoForm\";\n\nconst GameInfoState = (props) => {\n  // Default Values\n  const initialState = {\n    totalRows: DEFAULT_TOTAL_ROWS,\n    totalCols: DEFAULT_TOTAL_COLS,\n    totalMines: DEFAULT_TOTAL_MINES,\n    boardTimestamp: new Date().getTime(),\n    isRevealMode: false,\n  };\n  const [state, dispatch] = useReducer(GameInfoReducer, initialState);\n\n  const setTotalRows = (newTotalRows) =>\n    dispatch({ type: SET_TOTAL_ROWS, payload: newTotalRows });\n  const setTotalCols = (newTotalCols) =>\n    dispatch({ type: SET_TOTAL_COLS, payload: newTotalCols });\n  const setTotalMines = (newTotalMines) =>\n    dispatch({ type: SET_TOTAL_MINES, payload: newTotalMines });\n  const setBoardTimestamp = (newTimestamp) =>\n    dispatch({ type: SET_BOARD_TIMESTAMP, payload: newTimestamp });\n  const setIsRevealMode = (newIsRevealMode) =>\n    dispatch({ type: SET_IS_REVEAL_MODE, payload: newIsRevealMode });\n\n  return (\n    <GameInfoContext.Provider\n      value={{\n        totalRows: state.totalRows,\n        totalCols: state.totalCols,\n        totalMines: state.totalMines,\n        boardTimestamp: state.boardTimestamp,\n        isRevealMode: state.isRevealMode,\n        setTotalRows,\n        setTotalCols,\n        setTotalMines,\n        setBoardTimestamp,\n        setIsRevealMode,\n      }}\n    >\n      {props.children}\n    </GameInfoContext.Provider>\n  );\n};\n\nexport default GameInfoState;\n","import React, { useState, useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst GameInfoForm = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n\n  const [totalRows, setTotalRows] = useState(gameInfoContext.totalRows);\n  const [totalCols, setTotalCols] = useState(gameInfoContext.totalCols);\n  const [totalMines, setTotalMines] = useState(gameInfoContext.totalMines);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    gameInfoContext.setTotalRows(parseInt(totalRows));\n    gameInfoContext.setTotalCols(parseInt(totalCols));\n    gameInfoContext.setTotalMines(parseInt(totalMines));\n    gameInfoContext.setBoardTimestamp(new Date().getTime());\n  };\n\n  const onChangeRows = (e) => setTotalRows(e.target.value);\n  const onChangeCols = (e) => setTotalCols(e.target.value);\n  const onChangeMines = (e) => setTotalMines(e.target.value);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className='row'>\n        <div className='col-md-8 col-centered mx-auto'>\n          <div className='row'>\n            <div className='col-md-3'>\n              <div className='input-group'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-align-justify' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalRowsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalRows}\n                  onChange={onChangeRows}\n                  aria-label='Rows'\n                />\n              </div>\n            </div>\n            <div className='col-md-3'>\n              <div className='input-group'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i\n                      className='fa fa-align-justify fa-rotate-90'\n                      aria-hidden='true'\n                    />\n                  </span>\n                </div>\n                <input\n                  id='totalColsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalCols}\n                  onChange={onChangeCols}\n                  aria-label='Cols'\n                />\n              </div>\n            </div>\n\n            <div className='col-md-3'>\n              <div className='input-group'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-bomb' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalMinesInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max={totalRows * totalCols}\n                  value={totalMines}\n                  onChange={onChangeMines}\n                  aria-label='Mines'\n                />\n              </div>\n            </div>\n            <div className='col-md-3'>\n              <button className='btn btn-success' type='submit'>\n                New Game\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default GameInfoForm;\n","import React from \"react\";\nimport Navbar from \"./components/layout/Navbar/Navbar\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport GameInfoState from \"./context/GameInfo/GameInfoState\";\nimport \"./MinesweeperApp.css\";\nimport GameInfoForm from \"./components/GameInfoForm/GameInfoForm\";\n\nconst MinesweeperApp = () => {\n  return (\n    <GameInfoState>\n      <div className='minesweeperApp'>\n        <Navbar />\n        <div className='container mt-3'>\n          <GameInfoForm />\n        </div>\n        <div className='container jumbotron text-center mt-3 py-4 dark-background'>\n          <div className='container game-board-container'>\n            <GameBoard />\n          </div>\n        </div>\n      </div>\n    </GameInfoState>\n  );\n};\n\nexport default MinesweeperApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MinesweeperApp from \"./MinesweeperApp\";\n\nReactDOM.render(<MinesweeperApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}