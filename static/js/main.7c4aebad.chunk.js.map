{"version":3,"sources":["context/GameInfo/GameInfoContext.js","components/RevealMode/RevealMode.js","components/layout/Navbar/Navbar.js","components/Utils/GameConstans.js","components/Cell/Cell.js","components/Utils/UtilMethods.js","components/FlagCounter/FlagCouner.js","components/Alert/Alert.js","components/GameBoard/GameBoard.js","components/Utils/DataStorage.js","context/GameInfo/GameInfoReducer.js","context/types.js","context/GameInfo/GameInfoState.js","components/GameInfoForm/GameInfoForm.js","components/layout/HowToPlay/HowToPlay.js","MinesweeperApp.js","index.js"],"names":["GameInfoContext","createContext","RevealMode","gameInfoContext","useContext","isRevealMode","getIsRevealMode","className","onClick","setIsRevealMode","Navbar","e","preventDefault","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","SUCCESS_MESSAGE","header","content","timeout","MINE_MESSAGE","FLAG_MESSAGE","Cell","cellRow","cellCol","isMine","mineNeighbours","isRevealed","isFlagged","isLostTrigger","missedMark","clickHandler","rightClickHandler","touchHandler","touchHoldTimer","style","width","height","color","onContextMenu","onTouchStart","setTimeout","handleTochStart","onTouchEnd","clearTimeout","opacity","cursor","setMines","board","totalRows","totalCols","totalMines","setNeighboursMines","map","row","i","_","j","col","totalNeighboursMines","xOffSet","yOffSet","countNeighboursMines","mineCounter","randomRow","Math","floor","random","randomCol","FlagCouner","remainingFlags","prototype","PropTypes","number","Alert","alert","GameBoard","getTotalRows","getTotalCols","getTotalMines","boardTimestamp","getBoardTimestamp","getLocalStorageBoard","JSON","parse","localStorage","getItem","useState","setBoard","gameFreeze","setGameFreeze","parseInt","setRemainingFlags","numberOfCorrectFlags","setNumberOfCorrectFlags","storeAndSetGameFreeze","newValue","setItem","setGameFreezeToDS","storeAndSetRemainingFlags","setRemainingFlagsToDS","storeAndSetNumberOfCorrectFlags","setNumberOfCorrectFlagsToDS","setAlert","triggerAlert","useCallback","useEffect","push","initBoardCells","createBoard","stringify","checkForWin","event","updateBoardAfterInteraction","shiftKey","stopPropagation","longTouchHandler","isFlagChange","currentCell","toggleFlag","cell","revealCell","updatedBoard","removeFlag","setNewFlag","originCellRow","originCellCol","revealCellAux","revealNeighbours","originCell","originRow","originCol","cellToCheck","gridTemplateColumns","key","state","action","payload","GameInfoState","props","initialState","Date","getTime","useReducer","GameInfoReducer","dispatch","Provider","value","setTotalRows","newTotalRows","setTotalRowsToDS","setTotalCols","newTotalCols","setTotalColsToDS","setTotalMines","newTotalMines","setTotalMinesToDS","setBoardTimestamp","newTimestamp","setBoardTimestampToDS","newIsRevealMode","setIsRevealModeToDS","children","GameInfoForm","onSubmit","removeItem","aria-hidden","min","max","onChange","target","HowToPlay","ErrorBoundary","hasError","error","errorInfo","clear","this","React","Component","MinesweeperApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c4aebad.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GameInfoContext = createContext();\n\nexport default GameInfoContext;\n","import React, { useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst RevealMode = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.getIsRevealMode();\n  const toggleRevealMode = () => {\n    gameInfoContext.setIsRevealMode(!isRevealMode);\n  };\n\n  return (\n    <button\n      className={`btn btn-outline-success my-2 my-sm-0 ml-auto ${\n        isRevealMode ? \"active\" : \"\"\n      }`}\n      onClick={toggleRevealMode}\n    >\n      <i className='fa fa-eye' /> Reveal All Cells\n    </button>\n  );\n};\n\nexport default RevealMode;\n","import React from \"react\";\nimport RevealMode from \"../../RevealMode/RevealMode\";\n\nconst Navbar = () => {\n  return (\n    <nav className='navbar navbar-expand-md navbar-dark bg-dark'>\n      <a className='navbar-brand' onClick={(e) => e.preventDefault()} href='/#'>\n        <i className='fa fa-bomb' /> ReactJS Minesweeper\n      </a>\n      <button\n        className='navbar-toggler collapsed'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarCollapse'\n        aria-controls='navbarCollapse'\n        aria-expanded='false'\n        aria-label='Toggle navigation'\n      >\n        <span className='navbar-toggler-icon'></span>\n      </button>\n      <div className='navbar-collapse collapse' id='navbarCollapse'>\n        <RevealMode />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nexport const DEFAULT_TOTAL_ROWS = 9;\nexport const DEFAULT_TOTAL_COLS = 9;\nexport const DEFAULT_TOTAL_MINES = 10;\n\nexport const CELL_SIZE = 30;\n\nexport const SUCCESS_MESSAGE = {\n  header: \"Well Done!\",\n  content: (\n    <span>\n      You did it!\n      <i className='fa fa-trophy ml-1' />\n    </span>\n  ),\n  type: \"success\",\n  timeout: null,\n};\n\nexport const MINE_MESSAGE = {\n  header: \"Oy Vey!\",\n  content: (\n    <span>\n      It's a mine\n      <i className='fa fa-bomb ml-1' />\n    </span>\n  ),\n  type: \"danger\",\n  timeout: null,\n};\n\nexport const FLAG_MESSAGE = {\n  header: \"Out Of Flags!\",\n  content: (\n    <span>\n      Try to remove a flag before adding a new one\n      <i className='fa fa-flag ml-1' />\n    </span>\n  ),\n  type: \"secondary\",\n  timeout: 5000,\n};\n","import React, { useContext, Fragment } from \"react\";\nimport \"./Cell.css\";\nimport { CELL_SIZE } from \"../Utils/GameConstans\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport PropTypes from \"prop-types\";\n\nconst Cell = ({\n  cellRow,\n  cellCol,\n  isMine,\n  mineNeighbours,\n  isRevealed,\n  isFlagged,\n  isLostTrigger,\n  missedMark,\n  clickHandler,\n  rightClickHandler,\n  touchHandler,\n}) => {\n  const renderCell = () => {\n    if (isMine) {\n      return <i className='fa fa-bomb fa-md' />;\n    } else if (isFlagged) {\n      return <i className='fa fa-times' style={{ color: \"#ffb000\" }}></i>;\n    } else if (mineNeighbours > 0) {\n      return <Fragment>{mineNeighbours}</Fragment>;\n    }\n    return null;\n  };\n\n  const getType = () => {\n    if (isLostTrigger) {\n      return \"danger\";\n    }\n    if (missedMark) {\n      return \"secondary\";\n    }\n    return \"primary\";\n  };\n\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.getIsRevealMode();\n\n  let touchHoldTimer = null;\n  const handleTochStart = (cellRow, cellCol) => {\n    touchHoldTimer = setTimeout(() => {\n      touchHandler(cellRow, cellCol);\n    }, 500);\n  };\n  const handleTochEnd = () => {\n    clearTimeout(touchHoldTimer);\n  };\n\n  return (\n    <div\n      className={`game-cell alert alert-${getType()}`}\n      style={{\n        width: CELL_SIZE,\n        height: CELL_SIZE,\n      }}\n    >\n      <span>{renderCell()}</span>\n      <button\n        className='btn btn-warning game-btn d-block'\n        onClick={(e) => clickHandler(e, cellRow, cellCol)}\n        onContextMenu={(e) => rightClickHandler(e, cellRow, cellCol)}\n        onTouchStart={() => handleTochStart(cellRow, cellCol)}\n        onTouchEnd={handleTochEnd}\n        style={{\n          opacity: isRevealed ? 0 : isRevealMode ? 0.5 : 1,\n          cursor: isRevealed ? \"auto\" : \"pointer\",\n        }}\n      >\n        {isFlagged ? <i className='fa fa-flag' /> : null}\n      </button>\n    </div>\n  );\n};\n\nCell.propTypes = {\n  cellRow: PropTypes.number,\n  cellCol: PropTypes.number,\n  isMine: PropTypes.bool,\n  mineNeighbours: PropTypes.number,\n  isRevealed: PropTypes.bool,\n  isFlagged: PropTypes.bool,\n  isLostTrigger: PropTypes.bool,\n  missedMark: PropTypes.bool,\n  clickHandler: PropTypes.func,\n  touchHandler: PropTypes.func,\n};\n\nexport default Cell;\n","const initBoardCells = (board, totalRows, totalCols) => {\n  for (let i = 0; i < totalRows; i++) {\n    board.push([]);\n    for (let j = 0; j < totalCols; j++) {\n      board[i].push({\n        cellRow: i,\n        cellCol: j,\n        isRevealed: false,\n        isMine: false,\n        isFlagged: false,\n        isLostTrigger: false,\n        missedMark: false,\n        mineNeighbours: 0,\n      });\n    }\n  }\n};\n\nconst setMines = (board, totalRows, totalCols, totalMines) => {\n  const setNeighboursMines = (board) => {\n    const countNeighboursMines = (row, col) => {\n      if (board[row][col].isMine) {\n        return -1;\n      }\n      let totalNeighboursMines = 0;\n      for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n        let cellRow = row + xOffSet;\n        if (cellRow < 0 || cellRow >= totalRows) continue;\n        for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n          let cellCol = col + yOffSet;\n          if (cellCol < 0 || cellCol >= totalCols) continue;\n          if (board[cellRow][cellCol].isMine) {\n            totalNeighboursMines++;\n          }\n        }\n      }\n      return totalNeighboursMines;\n    };\n\n    board.map((row, i) =>\n      row.map(\n        (_, j) => (board[i][j].mineNeighbours = countNeighboursMines(i, j))\n      )\n    );\n  };\n  let mineCounter = 0;\n  while (mineCounter < totalMines) {\n    const randomRow = Math.floor(Math.random() * totalRows);\n    const randomCol = Math.floor(Math.random() * totalCols);\n    const cell = board[randomRow][randomCol];\n    if (!cell.isMine) {\n      board[randomRow][randomCol].isMine = true;\n      mineCounter++;\n    }\n    setNeighboursMines(board);\n  }\n};\n\nexport const createBoard = (totalRows, totalCols, totalMines) => {\n  let board = [];\n  initBoardCells(board, totalRows, totalCols);\n  setMines(board, totalRows, totalCols, totalMines);\n  return board;\n};\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FlagCouner = ({ remainingFlags }) => {\n  return (\n    <Fragment>\n      <div className='bs-component'>\n        <div className='alert'>\n          <h3 className='mr-1'>\n            <strong>{remainingFlags}</strong>\n            <i className='fa fa-flag ml-1' />\n          </h3>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nFlagCouner.prototype = {\n  remainingFlags: PropTypes.number,\n};\n\nexport default FlagCouner;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Alert = ({ alert }) => {\n  return (\n    alert !== null && (\n      <div className='bs-component'>\n        <div className={`alert alert-${alert.type}`}>\n          <strong>{alert.header}</strong> {alert.content}\n        </div>\n      </div>\n    )\n  );\n};\n\nAlert.propTypes = {\n  alert: PropTypes.object,\n};\n\nexport default Alert;\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  Fragment,\n  useCallback,\n} from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport Cell from \"../Cell/Cell\";\nimport \"./GameBoard.css\";\nimport {\n  CELL_SIZE,\n  SUCCESS_MESSAGE,\n  MINE_MESSAGE,\n  FLAG_MESSAGE,\n} from \"../Utils/GameConstans\";\nimport { createBoard } from \"../Utils/UtilMethods\";\nimport FlagCounter from \"../FlagCounter/FlagCouner\";\nimport Alert from \"../Alert/Alert\";\nimport {\n  getGameFreezeFromDS,\n  getRemainingFlagsFromDS,\n  getNumberOfCorrectFlagsFromDS,\n  setGameFreezeToDS,\n  setRemainingFlagsToDS,\n  setNumberOfCorrectFlagsToDS,\n} from \"../Utils/DataStorage\";\n\nconst GameBoard = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const totalRows = gameInfoContext.getTotalRows();\n  const totalCols = gameInfoContext.getTotalCols();\n  const totalMines = gameInfoContext.getTotalMines();\n  const boardTimestamp = gameInfoContext.getBoardTimestamp();\n\n  const getLocalStorageBoard = () => JSON.parse(localStorage.getItem(\"board\"));\n\n  const [board, setBoard] = useState(getLocalStorageBoard);\n  const [gameFreeze, setGameFreeze] = useState(getGameFreezeFromDS() || false);\n  const [remainingFlags, setRemainingFlags] = useState(\n    getRemainingFlagsFromDS() || totalMines\n  );\n  const [numberOfCorrectFlags, setNumberOfCorrectFlags] = useState(\n    getNumberOfCorrectFlagsFromDS() || 0\n  );\n\n  const storeAndSetGameFreeze = (newValue) => {\n    setGameFreezeToDS(newValue);\n    setGameFreeze(newValue);\n  };\n\n  const storeAndSetRemainingFlags = (newValue) => {\n    setRemainingFlagsToDS(newValue);\n    setRemainingFlags(newValue);\n  };\n\n  const storeAndSetNumberOfCorrectFlags = (newValue) => {\n    setNumberOfCorrectFlagsToDS(newValue);\n    setNumberOfCorrectFlags(newValue);\n  };\n\n  const [alert, setAlert] = useState(null);\n  const triggerAlert = useCallback((alert) => {\n    setAlert(alert);\n    if (alert && alert.timeout > 0) {\n      setTimeout(() => setAlert(null), alert.timeout);\n    }\n  }, []);\n\n  useEffect(() => {\n    (() => {\n      //Reset board\n      if (!getLocalStorageBoard()) {\n        setBoard(createBoard(totalRows, totalCols, totalMines));\n        storeAndSetNumberOfCorrectFlags(0);\n        storeAndSetRemainingFlags(totalMines);\n        storeAndSetGameFreeze(false);\n        setAlert(null);\n      }\n    })();\n  }, [totalRows, totalCols, totalMines, boardTimestamp]);\n\n  useEffect(() => {\n    localStorage.setItem(\"board\", JSON.stringify(board));\n  }, [board]);\n\n  const checkForWin = useCallback(\n    (numberOfCorrectFlags, totalMines) => {\n      if (numberOfCorrectFlags === totalMines) {\n        triggerAlert(SUCCESS_MESSAGE);\n        storeAndSetGameFreeze(true);\n      } else {\n        triggerAlert(null);\n        storeAndSetGameFreeze(false);\n      }\n    },\n    [triggerAlert]\n  );\n\n  useEffect(() => checkForWin(numberOfCorrectFlags, totalMines), [\n    numberOfCorrectFlags,\n    totalMines,\n    triggerAlert,\n    checkForWin,\n  ]);\n\n  const revealAllMines = () => {\n    let updatedBoard = [...board];\n    return updatedBoard.map((row) =>\n      row.map((cell) => {\n        if (\n          (cell.isMine && !cell.isFlagged) ||\n          (cell.isFlagged && !cell.isMine)\n        ) {\n          return {\n            ...cell,\n            isRevealed: true,\n            missedMark: true,\n          };\n        } else {\n          return cell;\n        }\n      })\n    );\n  };\n\n  const clickHandler = (event, cellRow, cellCol) => {\n    updateBoardAfterInteraction(event.shiftKey, cellRow, cellCol);\n  };\n\n  const rightClickHandler = (event, cellRow, cellCol) => {\n    event.preventDefault && event.preventDefault();\n    event.stopPropagation && event.stopPropagation();\n    updateBoardAfterInteraction(true, cellRow, cellCol);\n    return false;\n  };\n\n  const longTouchHandler = (cellRow, cellCol) => {\n    updateBoardAfterInteraction(true, cellRow, cellCol);\n  };\n\n  const updateBoardAfterInteraction = (isFlagChange, cellRow, cellCol) => {\n    const currentCell = board[cellRow][cellCol];\n    if (gameFreeze || currentCell.isRevealed) {\n      return;\n    }\n    if (isFlagChange) {\n      toggleFlag(cellRow, cellCol);\n      return;\n    }\n    if (currentCell.isFlagged) {\n      return;\n    }\n    if (currentCell.isMine) {\n      triggerAlert(MINE_MESSAGE);\n      currentCell.isLostTrigger = true;\n      setBoard(revealAllMines());\n      storeAndSetGameFreeze(true);\n      return;\n    }\n    if (!currentCell.isFlagged) {\n      revealCell(cellRow, cellCol);\n    }\n  };\n\n  const toggleFlag = (row, col) => {\n    const removeFlag = (remainingFlags, isMine, numberOfCorrectFlags) => {\n      storeAndSetRemainingFlags(remainingFlags + 1);\n      if (isMine) {\n        storeAndSetNumberOfCorrectFlags(numberOfCorrectFlags - 1);\n      }\n    };\n    const setNewFlag = (remainingFlags, isMine, numberOfCorrectFlags) => {\n      storeAndSetRemainingFlags(remainingFlags - 1);\n      if (currentCell.isMine) {\n        storeAndSetNumberOfCorrectFlags(numberOfCorrectFlags + 1);\n      }\n    };\n    let updatedBoard = [...board];\n    const currentCell = updatedBoard[row][col];\n    if (currentCell.isFlagged) {\n      removeFlag(remainingFlags, currentCell.isMine, numberOfCorrectFlags);\n    } else {\n      if (remainingFlags > 0) {\n        setNewFlag(remainingFlags, currentCell.isMine, numberOfCorrectFlags);\n      } else {\n        triggerAlert(FLAG_MESSAGE);\n        return;\n      }\n    }\n    updatedBoard[row][col].isFlagged = !updatedBoard[row][col].isFlagged;\n    setBoard(updatedBoard);\n  };\n\n  const revealCell = (originCellRow, originCellCol) => {\n    let updatedBoard = [...board];\n    updatedBoard = revealCellAux(updatedBoard, originCellRow, originCellCol);\n    setBoard(updatedBoard);\n  };\n  const revealCellAux = (updatedBoard, originCellRow, originCellCol) => {\n    let currentCell = updatedBoard[originCellRow][originCellCol];\n    currentCell.isRevealed = true;\n    if (currentCell.mineNeighbours === 0) {\n      updatedBoard = revealNeighbours(updatedBoard, currentCell);\n    }\n    return updatedBoard;\n  };\n\n  const revealNeighbours = (updatedBoard, originCell) => {\n    const originRow = originCell.cellRow;\n    const originCol = originCell.cellCol;\n    for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n      let cellRow = originRow + xOffSet;\n      if (cellRow < 0 || cellRow >= totalRows) continue;\n      for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n        let cellCol = originCol + yOffSet;\n        if (cellCol < 0 || cellCol >= totalCols) continue;\n        let cellToCheck = updatedBoard[cellRow][cellCol];\n        if (\n          !cellToCheck.isRevealed &&\n          !cellToCheck.isMine &&\n          !cellToCheck.isFlagged\n        ) {\n          revealCellAux(updatedBoard, cellToCheck.cellRow, cellToCheck.cellCol);\n        }\n      }\n    }\n    return updatedBoard;\n  };\n\n  const renderBoard = () =>\n    board &&\n    board.map((row, i) =>\n      row.map((cell, j) => (\n        <div key={`${i},${j}`}>\n          <Cell\n            cellRow={i}\n            cellCol={j}\n            isMine={cell.isMine}\n            mineNeighbours={cell.mineNeighbours}\n            isRevealed={cell.isRevealed}\n            isFlagged={cell.isFlagged}\n            isLostTrigger={cell.isLostTrigger}\n            missedMark={cell.missedMark}\n            clickHandler={clickHandler}\n            rightClickHandler={rightClickHandler}\n            touchHandler={longTouchHandler}\n          />\n        </div>\n      ))\n    );\n\n  return (\n    <Fragment>\n      <Alert alert={alert} />\n      <div className='container'>\n        <FlagCounter remainingFlags={remainingFlags} />\n      </div>\n      <div\n        className='game-board'\n        style={{\n          gridTemplateColumns: `repeat(${totalCols}, ${CELL_SIZE}px)`,\n        }}\n      >\n        {renderBoard()}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default GameBoard;\n","export const getGameFreezeFromDS = () =>\n  localStorage.getItem(\"gameFreeze\") === \"true\";\n\nexport const getRemainingFlagsFromDS = () =>\n  parseInt(localStorage.getItem(\"remainingFlags\"));\n\nexport const getNumberOfCorrectFlagsFromDS = () =>\n  parseInt(localStorage.getItem(\"numberOfCorrectFlags\"));\n\nexport const getTotalRowsFromDS = () =>\n  parseInt(localStorage.getItem(\"totalRows\"));\n\nexport const getTotalColsFromDS = () =>\n  parseInt(localStorage.getItem(\"totalCols\"));\n\nexport const getTotalMinesFromDS = () =>\n  parseInt(localStorage.getItem(\"totalMines\"));\n\nexport const getBoardTimestampFromDS = () =>\n  localStorage.getItem(\"boardTimestamp\");\n\nexport const getIsRevealModeFromDS = () =>\n  localStorage.getItem(\"isRevealMode\") === \"true\";\n\nexport const setGameFreezeToDS = (newValue) =>\n  localStorage.setItem(\"gameFreeze\", newValue);\n\nexport const setRemainingFlagsToDS = (newValue) =>\n  localStorage.setItem(\"remainingFlags\", newValue);\n\nexport const setNumberOfCorrectFlagsToDS = (newValue) =>\n  localStorage.setItem(\"numberOfCorrectFlags\", newValue);\n\nexport const setTotalRowsToDS = (newTotalRows) =>\n  localStorage.setItem(\"totalRows\", newTotalRows);\n\nexport const setTotalColsToDS = (newTotalCols) =>\n  localStorage.setItem(\"totalCols\", newTotalCols);\n\nexport const setTotalMinesToDS = (newTotalMines) =>\n  localStorage.setItem(\"totalMines\", newTotalMines);\n\nexport const setBoardTimestampToDS = (newTimestamp) =>\n  localStorage.setItem(\"boardTimestamp\", newTimestamp);\n\nexport const setIsRevealModeToDS = (newIsRevealMode) =>\n  localStorage.setItem(\"isRevealMode\", newIsRevealMode);\n\nexport const clearDS = () => {\n  localStorage.clear();\n};\n","import {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_TOTAL_ROWS:\n      return {\n        ...state,\n        totalRows: action.payload,\n      };\n    case SET_TOTAL_COLS:\n      return {\n        ...state,\n        totalCols: action.payload,\n      };\n    case SET_TOTAL_MINES:\n      return {\n        ...state,\n        totalMines: action.payload,\n      };\n    case SET_BOARD_TIMESTAMP:\n      return {\n        ...state,\n        boardTimestamp: action.payload,\n      };\n    case SET_IS_REVEAL_MODE:\n      return {\n        ...state,\n        isRevealMode: action.payload,\n      };\n    default:\n      return;\n  }\n};\n","export const SET_TOTAL_ROWS = \"SET_TOTAL_ROWS\";\nexport const SET_TOTAL_COLS = \"SET_TOTAL_COLS\";\nexport const SET_TOTAL_MINES = \"SET_TOTAL_MINES\";\nexport const SET_BOARD_TIMESTAMP = \"SET_BOARD_TIMESTAMP\";\nexport const SET_IS_REVEAL_MODE = \"SET_IS_REVEAL_MODE\";\n","import React, { useReducer } from \"react\";\nimport GameInfoContext from \"./GameInfoContext\";\nimport GameInfoReducer from \"./GameInfoReducer\";\nimport {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\nimport {\n  DEFAULT_TOTAL_ROWS,\n  DEFAULT_TOTAL_COLS,\n  DEFAULT_TOTAL_MINES,\n} from \"../../components/Utils/GameConstans\";\nimport {\n  getTotalRowsFromDS,\n  getTotalColsFromDS,\n  getTotalMinesFromDS,\n  getBoardTimestampFromDS,\n  getIsRevealModeFromDS,\n  setTotalRowsToDS,\n  setTotalColsToDS,\n  setTotalMinesToDS,\n  setBoardTimestampToDS,\n  setIsRevealModeToDS,\n} from \"../../components/Utils/DataStorage\";\n// import GameInfoForm from \"../../components/GameInfoForm\";\n\nconst GameInfoState = (props) => {\n  // Default Values\n  const initialState = {\n    totalRows: DEFAULT_TOTAL_ROWS,\n    totalCols: DEFAULT_TOTAL_COLS,\n    totalMines: DEFAULT_TOTAL_MINES,\n    boardTimestamp: new Date().getTime(),\n    isRevealMode: false,\n  };\n  const [state, dispatch] = useReducer(GameInfoReducer, initialState);\n\n  const getTotalRows = () => {\n    const totalRows = getTotalRowsFromDS();\n    return totalRows ? totalRows : state.totalRows;\n  };\n\n  const getTotalCols = () => {\n    const totalCols = getTotalColsFromDS();\n    return totalCols ? totalCols : state.totalCols;\n  };\n\n  const getTotalMines = () => {\n    const totalMines = getTotalMinesFromDS();\n    return totalMines ? totalMines : state.totalMines;\n  };\n\n  const getBoardTimestamp = () => {\n    const boardTimestamp = getBoardTimestampFromDS();\n    return boardTimestamp ? boardTimestamp : state.boardTimestamp;\n  };\n\n  const getIsRevealMode = () => {\n    const isRevealMode = getIsRevealModeFromDS();\n    return isRevealMode ? isRevealMode : state.isRevealMode;\n  };\n\n  const setTotalRows = (newTotalRows) => {\n    setTotalRowsToDS(newTotalRows);\n    dispatch({ type: SET_TOTAL_ROWS, payload: newTotalRows });\n  };\n  const setTotalCols = (newTotalCols) => {\n    setTotalColsToDS(newTotalCols);\n    dispatch({ type: SET_TOTAL_COLS, payload: newTotalCols });\n  };\n  const setTotalMines = (newTotalMines) => {\n    setTotalMinesToDS(newTotalMines);\n    dispatch({ type: SET_TOTAL_MINES, payload: newTotalMines });\n  };\n  const setBoardTimestamp = (newTimestamp) => {\n    setBoardTimestampToDS(newTimestamp);\n    dispatch({ type: SET_BOARD_TIMESTAMP, payload: newTimestamp });\n  };\n  const setIsRevealMode = (newIsRevealMode) => {\n    setIsRevealModeToDS(newIsRevealMode);\n    dispatch({ type: SET_IS_REVEAL_MODE, payload: newIsRevealMode });\n  };\n\n  return (\n    <GameInfoContext.Provider\n      value={{\n        getTotalRows,\n        getTotalCols,\n        getTotalMines,\n        getBoardTimestamp,\n        getIsRevealMode,\n        setTotalRows,\n        setTotalCols,\n        setTotalMines,\n        setBoardTimestamp,\n        setIsRevealMode,\n      }}\n    >\n      {props.children}\n    </GameInfoContext.Provider>\n  );\n};\n\nexport default GameInfoState;\n","import React, { useState, useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst GameInfoForm = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n\n  const [totalRows, setTotalRows] = useState(gameInfoContext.getTotalRows());\n  const [totalCols, setTotalCols] = useState(gameInfoContext.getTotalCols());\n  const [totalMines, setTotalMines] = useState(gameInfoContext.getTotalMines());\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    gameInfoContext.setTotalRows(parseInt(totalRows));\n    gameInfoContext.setTotalCols(parseInt(totalCols));\n    gameInfoContext.setTotalMines(parseInt(totalMines));\n    localStorage.removeItem(\"board\");\n    gameInfoContext.setBoardTimestamp(new Date().getTime());\n  };\n\n  const onChangeRows = (e) => setTotalRows(e.target.value);\n  const onChangeCols = (e) => setTotalCols(e.target.value);\n  const onChangeMines = (e) => setTotalMines(e.target.value);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className='row'>\n        <div className='col-md-8 col-centered mx-auto'>\n          <div className='row'>\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-align-justify' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalRowsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalRows}\n                  onChange={onChangeRows}\n                  aria-label='Rows'\n                />\n              </div>\n            </div>\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i\n                      className='fa fa-align-justify fa-rotate-90'\n                      aria-hidden='true'\n                    />\n                  </span>\n                </div>\n                <input\n                  id='totalColsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalCols}\n                  onChange={onChangeCols}\n                  aria-label='Cols'\n                />\n              </div>\n            </div>\n\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-bomb' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalMinesInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max={totalRows * totalCols}\n                  value={totalMines}\n                  onChange={onChangeMines}\n                  aria-label='Mines'\n                />\n              </div>\n            </div>\n            <div className='col-md-3 mb-1'>\n              <button className='btn btn-success btn-block' type='submit'>\n                New Game\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default GameInfoForm;\n","import React from \"react\";\n\nconst HowToPlay = () => {\n  return (\n    <div className='continer text-center mb-3'>\n      <h4 className='text-light'>How To Play</h4>\n      <span className='text-light mr-2 d-none d-sm-inline'>\n        Click to reveal a cell.\n      </span>\n      <span className='text-light mr-2 d-block d-sm-none'>\n        Touch to reveal a cell.\n      </span>\n      <span className='text-light mr-2 d-none d-sm-inline'>\n        Shift + Click or Right Click to set a flag.\n      </span>\n      <span className='text-light mr-2 d-block d-sm-none'>\n        Touch Longer to set a flag.\n      </span>\n      <span className='text-light'>Flag all mines for the win!</span>\n    </div>\n  );\n};\n\nexport default HowToPlay;\n","import React from \"react\";\nimport Navbar from \"./components/layout/Navbar/Navbar\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport GameInfoState from \"./context/GameInfo/GameInfoState\";\nimport \"./MinesweeperApp.css\";\nimport GameInfoForm from \"./components/GameInfoForm/GameInfoForm\";\nimport HowToPlay from \"./components/layout/HowToPlay/HowToPlay\";\nimport { clearDS } from \"./components/Utils/DataStorage\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    clearDS();\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className='container'>\n          <h1 className='text-white'>Something went wrong.</h1>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst MinesweeperApp = () => {\n  return (\n    <ErrorBoundary>\n      <GameInfoState>\n        <div className='minesweeperApp'>\n          <Navbar />\n          <div className='container mt-3'>\n            <GameInfoForm />\n          </div>\n          <div className='container jumbotron text-center mt-3 py-4 dark-background'>\n            <div className='container game-board-container'>\n              <GameBoard />\n            </div>\n          </div>\n          <HowToPlay />\n        </div>\n      </GameInfoState>\n    </ErrorBoundary>\n  );\n};\n\nexport default MinesweeperApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MinesweeperApp from \"./MinesweeperApp\";\n\nReactDOM.render(<MinesweeperApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}