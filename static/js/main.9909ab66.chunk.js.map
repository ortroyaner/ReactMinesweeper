{"version":3,"sources":["context/GameInfo/GameInfoContext.js","components/RevealMode/RevealMode.js","components/layout/Navbar/Navbar.js","components/Utils/GameConstans.js","components/Cell/Cell.js","components/Utils/UtilMethods.js","components/FlagCounter/FlagCouner.js","components/Alert/Alert.js","components/GameBoard/GameBoard.js","components/Utils/DataStorage.js","context/GameInfo/GameInfoReducer.js","context/types.js","context/GameInfo/GameInfoState.js","components/GameInfoForm/GameInfoForm.js","components/layout/HowToPlay/HowToPlay.js","MinesweeperApp.js","index.js"],"names":["GameInfoContext","createContext","RevealMode","gameInfoContext","useContext","isRevealMode","getIsRevealMode","className","onClick","setIsRevealMode","Navbar","e","preventDefault","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","SUCCESS_MESSAGE","header","content","timeout","MINE_MESSAGE","FLAG_MESSAGE","Cell","cellRow","cellCol","isMine","mineNeighbours","isRevealed","isFlagged","isLostTrigger","missedMark","clickHandler","touchHandler","touchHoldTimer","style","width","height","color","onTouchStart","setTimeout","handleTochStart","onTouchEnd","clearTimeout","opacity","cursor","createBoard","totalRows","totalCols","totalMines","board","i","push","j","initBoardCells","setNeighboursMines","countNeighboursMines","row","col","totalNeighboursMines","xOffSet","yOffSet","map","_","mineCounter","randomRow","Math","floor","random","randomCol","cell","setMines","FlagCouner","remainingFlags","prototype","PropTypes","number","Alert","alert","GameBoard","getTotalRows","getTotalCols","getTotalMines","boardTimestamp","getBoardTimestamp","getLocalStorageBoard","JSON","parse","localStorage","getItem","useState","setBoard","gameFreeze","setGameFreeze","parseInt","setRemainingFlags","numberOfCorrectFlags","setNumberOfCorrectFlags","storeAndSetGameFreeze","newValue","setItem","setGameFreezeToDS","storeAndSetRemainingFlags","setRemainingFlagsToDS","storeAndSetNumberOfCorrectFlags","setNumberOfCorrectFlagsToDS","setAlert","triggerAlert","useCallback","useEffect","stringify","checkForWin","event","updateBoardAfterInteraction","shiftKey","isFlagChange","currentCell","toggleFlag","revealCell","updatedBoard","removeFlag","setNewFlag","originCellRow","originCellCol","revealCellAux","revealNeighbours","originCell","originRow","originCol","cellToCheck","gridTemplateColumns","key","state","action","payload","GameInfoState","props","initialState","Date","getTime","useReducer","GameInfoReducer","dispatch","Provider","value","setTotalRows","newTotalRows","setTotalRowsToDS","setTotalCols","newTotalCols","setTotalColsToDS","setTotalMines","newTotalMines","setTotalMinesToDS","setBoardTimestamp","newTimestamp","setBoardTimestampToDS","newIsRevealMode","setIsRevealModeToDS","children","GameInfoForm","onSubmit","removeItem","aria-hidden","min","max","onChange","target","HowToPlay","ErrorBoundary","hasError","error","errorInfo","clear","this","React","Component","MinesweeperApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9909ab66.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GameInfoContext = createContext();\n\nexport default GameInfoContext;\n","import React, { useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst RevealMode = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.getIsRevealMode();\n  const toggleRevealMode = () => {\n    gameInfoContext.setIsRevealMode(!isRevealMode);\n  };\n\n  return (\n    <button\n      className={`btn btn-outline-success my-2 my-sm-0 ml-auto ${\n        isRevealMode ? \"active\" : \"\"\n      }`}\n      onClick={toggleRevealMode}\n    >\n      <i className='fa fa-eye' /> Reveal All Cells\n    </button>\n  );\n};\n\nexport default RevealMode;\n","import React from \"react\";\nimport RevealMode from \"../../RevealMode/RevealMode\";\n\nconst Navbar = () => {\n  return (\n    <nav className='navbar navbar-expand-md navbar-dark bg-dark'>\n      <a className='navbar-brand' onClick={(e) => e.preventDefault()} href='/#'>\n        <i className='fa fa-bomb' /> ReactJS Minesweeper\n      </a>\n      <button\n        className='navbar-toggler collapsed'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarCollapse'\n        aria-controls='navbarCollapse'\n        aria-expanded='false'\n        aria-label='Toggle navigation'\n      >\n        <span className='navbar-toggler-icon'></span>\n      </button>\n      <div className='navbar-collapse collapse' id='navbarCollapse'>\n        <RevealMode />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nexport const DEFAULT_TOTAL_ROWS = 9;\nexport const DEFAULT_TOTAL_COLS = 9;\nexport const DEFAULT_TOTAL_MINES = 10;\n\nexport const CELL_SIZE = 30;\n\nexport const SUCCESS_MESSAGE = {\n  header: \"Well Done!\",\n  content: (\n    <span>\n      You did it!\n      <i className='fa fa-trophy ml-1' />\n    </span>\n  ),\n  type: \"success\",\n  timeout: null,\n};\n\nexport const MINE_MESSAGE = {\n  header: \"Oy Vey!\",\n  content: (\n    <span>\n      It's a mine\n      <i className='fa fa-bomb ml-1' />\n    </span>\n  ),\n  type: \"danger\",\n  timeout: null,\n};\n\nexport const FLAG_MESSAGE = {\n  header: \"Out Of Flags!\",\n  content: (\n    <span>\n      Try to remove a flag before adding a new one\n      <i className='fa fa-flag ml-1' />\n    </span>\n  ),\n  type: \"secondary\",\n  timeout: 5000,\n};\n","import React, { useContext, Fragment } from \"react\";\nimport \"./Cell.css\";\nimport { CELL_SIZE } from \"../Utils/GameConstans\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport PropTypes from \"prop-types\";\n\nconst Cell = ({\n  cellRow,\n  cellCol,\n  isMine,\n  mineNeighbours,\n  isRevealed,\n  isFlagged,\n  isLostTrigger,\n  missedMark,\n  clickHandler,\n  touchHandler,\n}) => {\n  const renderCell = () => {\n    if (isMine) {\n      return <i className='fa fa-bomb fa-md' />;\n    } else if (isFlagged) {\n      return <i className='fa fa-times' style={{ color: \"#ffb000\" }}></i>;\n    } else if (mineNeighbours > 0) {\n      return <Fragment>{mineNeighbours}</Fragment>;\n    }\n    return null;\n  };\n\n  const getType = () => {\n    if (isLostTrigger) {\n      return \"danger\";\n    }\n    if (missedMark) {\n      return \"secondary\";\n    }\n    return \"primary\";\n  };\n\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.getIsRevealMode();\n\n  let touchHoldTimer = null;\n  const handleTochStart = (cellRow, cellCol) => {\n    touchHoldTimer = setTimeout(() => {\n      touchHandler(true, cellRow, cellCol);\n    }, 500);\n  };\n  const handleTochEnd = () => {\n    clearTimeout(touchHoldTimer);\n  };\n\n  return (\n    <div\n      className={`game-cell alert alert-${getType()}`}\n      style={{\n        width: CELL_SIZE,\n        height: CELL_SIZE,\n      }}\n    >\n      <span>{renderCell()}</span>\n      <button\n        className='btn btn-warning game-btn d-block'\n        onClick={(e) => clickHandler(e, cellRow, cellCol)}\n        onTouchStart={() => handleTochStart(cellRow, cellCol)}\n        onTouchEnd={handleTochEnd}\n        style={{\n          opacity: isRevealed ? 0 : isRevealMode ? 0.5 : 1,\n          cursor: isRevealed ? \"auto\" : \"pointer\",\n        }}\n      >\n        {isFlagged ? <i className='fa fa-flag' /> : null}\n      </button>\n    </div>\n  );\n};\n\nCell.propTypes = {\n  cellRow: PropTypes.number,\n  cellCol: PropTypes.number,\n  isMine: PropTypes.bool,\n  mineNeighbours: PropTypes.number,\n  isRevealed: PropTypes.bool,\n  isFlagged: PropTypes.bool,\n  isLostTrigger: PropTypes.bool,\n  missedMark: PropTypes.bool,\n  clickHandler: PropTypes.func,\n  touchHandler: PropTypes.func,\n};\n\nexport default Cell;\n","const initBoardCells = (board, totalRows, totalCols, totalMines) => {\n  for (let i = 0; i < totalRows; i++) {\n    board.push([]);\n    for (let j = 0; j < totalCols; j++) {\n      board[i].push({\n        cellRow: i,\n        cellCol: j,\n        isRevealed: false,\n        isMine: false,\n        isFlagged: false,\n        isLostTrigger: false,\n        missedMark: false,\n        mineNeighbours: 0,\n      });\n    }\n  }\n};\n\nconst setMines = (board, totalRows, totalCols, totalMines) => {\n  const setNeighboursMines = (board) => {\n    const countNeighboursMines = (row, col) => {\n      if (board[row][col].isMine) {\n        return -1;\n      }\n      let totalNeighboursMines = 0;\n      for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n        let cellRow = row + xOffSet;\n        if (cellRow < 0 || cellRow >= totalRows) continue;\n        for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n          let cellCol = col + yOffSet;\n          if (cellCol < 0 || cellCol >= totalCols) continue;\n          if (board[cellRow][cellCol].isMine) {\n            totalNeighboursMines++;\n          }\n        }\n      }\n      return totalNeighboursMines;\n    };\n\n    board.map((row, i) =>\n      row.map(\n        (_, j) =>\n          (board[i][j] = {\n            ...board[i][j],\n            mineNeighbours: countNeighboursMines(i, j),\n          })\n      )\n    );\n  };\n  let mineCounter = 0;\n  while (mineCounter < totalMines) {\n    const randomRow = Math.floor(Math.random() * totalRows);\n    const randomCol = Math.floor(Math.random() * totalCols);\n    const cell = board[randomRow][randomCol];\n    if (!cell.isMine) {\n      board[randomRow][randomCol] = {\n        ...cell,\n        isMine: true,\n      };\n      mineCounter++;\n    }\n    setNeighboursMines(board);\n  }\n};\n\nexport const createBoard = (totalRows, totalCols, totalMines) => {\n  let board = [];\n  initBoardCells(board, totalRows, totalCols, totalMines);\n  setMines(board, totalRows, totalCols, totalMines);\n  return board;\n};\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FlagCouner = ({ remainingFlags }) => {\n  return (\n    <Fragment>\n      <div className='bs-component'>\n        <div className='alert'>\n          <h3 className='mr-1'>\n            <strong>{remainingFlags}</strong>\n            <i className='fa fa-flag ml-1' />\n          </h3>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nFlagCouner.prototype = {\n  remainingFlags: PropTypes.number,\n};\n\nexport default FlagCouner;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Alert = ({ alert }) => {\n  return (\n    alert !== null && (\n      <div className='bs-component'>\n        <div className={`alert alert-${alert.type}`}>\n          <strong>{alert.header}</strong> {alert.content}\n        </div>\n      </div>\n    )\n  );\n};\n\nAlert.propTypes = {\n  alert: PropTypes.object,\n};\n\nexport default Alert;\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  Fragment,\n  useCallback,\n} from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport Cell from \"../Cell/Cell\";\nimport \"./GameBoard.css\";\nimport {\n  CELL_SIZE,\n  SUCCESS_MESSAGE,\n  MINE_MESSAGE,\n  FLAG_MESSAGE,\n} from \"../Utils/GameConstans\";\nimport { createBoard } from \"../Utils/UtilMethods\";\nimport FlagCounter from \"../FlagCounter/FlagCouner\";\nimport Alert from \"../Alert/Alert\";\nimport {\n  getGameFreezeFromDS,\n  getRemainingFlagsFromDS,\n  getNumberOfCorrectFlagsFromDS,\n  setGameFreezeToDS,\n  setRemainingFlagsToDS,\n  setNumberOfCorrectFlagsToDS,\n} from \"../Utils/DataStorage\";\n\nconst GameBoard = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const totalRows = gameInfoContext.getTotalRows();\n  const totalCols = gameInfoContext.getTotalCols();\n  const totalMines = gameInfoContext.getTotalMines();\n  const boardTimestamp = gameInfoContext.getBoardTimestamp();\n\n  const getLocalStorageBoard = () => JSON.parse(localStorage.getItem(\"board\"));\n\n  const [board, setBoard] = useState(getLocalStorageBoard);\n  const [gameFreeze, setGameFreeze] = useState(getGameFreezeFromDS() || false);\n  const [remainingFlags, setRemainingFlags] = useState(\n    getRemainingFlagsFromDS() || totalMines\n  );\n  const [numberOfCorrectFlags, setNumberOfCorrectFlags] = useState(\n    getNumberOfCorrectFlagsFromDS() || 0\n  );\n\n  const storeAndSetGameFreeze = (newValue) => {\n    setGameFreezeToDS(newValue);\n    setGameFreeze(newValue);\n  };\n\n  const storeAndSetRemainingFlags = (newValue) => {\n    setRemainingFlagsToDS(newValue);\n    setRemainingFlags(newValue);\n  };\n\n  const storeAndSetNumberOfCorrectFlags = (newValue) => {\n    setNumberOfCorrectFlagsToDS(newValue);\n    setNumberOfCorrectFlags(newValue);\n  };\n\n  const [alert, setAlert] = useState(null);\n  const triggerAlert = useCallback((alert) => {\n    setAlert(alert);\n    if (alert && alert.timeout > 0) {\n      setTimeout(() => setAlert(null), alert.timeout);\n    }\n  }, []);\n\n  useEffect(() => {\n    (() => {\n      //Reset board\n      if (!getLocalStorageBoard()) {\n        setBoard(createBoard(totalRows, totalCols, totalMines));\n        storeAndSetNumberOfCorrectFlags(0);\n        storeAndSetRemainingFlags(totalMines);\n        storeAndSetGameFreeze(false);\n        setAlert(null);\n      }\n    })();\n  }, [totalRows, totalCols, totalMines, boardTimestamp]);\n\n  useEffect(() => {\n    localStorage.setItem(\"board\", JSON.stringify(board));\n  }, [board]);\n\n  const checkForWin = useCallback(\n    (numberOfCorrectFlags, totalMines) => {\n      if (numberOfCorrectFlags === totalMines) {\n        triggerAlert(SUCCESS_MESSAGE);\n        storeAndSetGameFreeze(true);\n      } else {\n        triggerAlert(null);\n        storeAndSetGameFreeze(false);\n      }\n    },\n    [triggerAlert]\n  );\n\n  useEffect(() => checkForWin(numberOfCorrectFlags, totalMines), [\n    numberOfCorrectFlags,\n    totalMines,\n    triggerAlert,\n    checkForWin,\n  ]);\n\n  const revealAllMines = () => {\n    let updatedBoard = [...board];\n    return updatedBoard.map((row) =>\n      row.map((cell) => {\n        if (\n          (cell.isMine && !cell.isFlagged) ||\n          (cell.isFlagged && !cell.isMine)\n        ) {\n          return {\n            ...cell,\n            isRevealed: true,\n            missedMark: true,\n          };\n        } else {\n          return cell;\n        }\n      })\n    );\n  };\n\n  const clickHandler = (event, cellRow, cellCol) => {\n    updateBoardAfterInteraction(event.shiftKey, cellRow, cellCol);\n  };\n\n  const updateBoardAfterInteraction = (isFlagChange, cellRow, cellCol) => {\n    const currentCell = board[cellRow][cellCol];\n    if (gameFreeze || currentCell.isRevealed) {\n      return;\n    }\n    if (isFlagChange) {\n      toggleFlag(cellRow, cellCol);\n      return;\n    }\n    if (currentCell.isFlagged) {\n      return;\n    }\n    if (currentCell.isMine) {\n      triggerAlert(MINE_MESSAGE);\n      currentCell.isLostTrigger = true;\n      setBoard(revealAllMines());\n      storeAndSetGameFreeze(true);\n      return;\n    }\n    if (!currentCell.isFlagged) {\n      revealCell(cellRow, cellCol);\n    }\n  };\n\n  const toggleFlag = (row, col) => {\n    const removeFlag = (remainingFlags, isMine, numberOfCorrectFlags) => {\n      storeAndSetRemainingFlags(remainingFlags + 1);\n      if (isMine) {\n        storeAndSetNumberOfCorrectFlags(numberOfCorrectFlags - 1);\n      }\n    };\n    const setNewFlag = (remainingFlags, isMine, numberOfCorrectFlags) => {\n      storeAndSetRemainingFlags(remainingFlags - 1);\n      if (currentCell.isMine) {\n        storeAndSetNumberOfCorrectFlags(numberOfCorrectFlags + 1);\n      }\n    };\n    let updatedBoard = [...board];\n    const currentCell = updatedBoard[row][col];\n    if (currentCell.isFlagged) {\n      removeFlag(remainingFlags, currentCell.isMine, numberOfCorrectFlags);\n    } else {\n      if (remainingFlags > 0) {\n        setNewFlag(remainingFlags, currentCell.isMine, numberOfCorrectFlags);\n      } else {\n        triggerAlert(FLAG_MESSAGE);\n        return;\n      }\n    }\n    updatedBoard[row][col].isFlagged = !updatedBoard[row][col].isFlagged;\n    setBoard(updatedBoard);\n  };\n\n  const revealCell = (originCellRow, originCellCol) => {\n    let updatedBoard = [...board];\n    updatedBoard = revealCellAux(updatedBoard, originCellRow, originCellCol);\n    setBoard(updatedBoard);\n  };\n  const revealCellAux = (updatedBoard, originCellRow, originCellCol) => {\n    let currentCell = updatedBoard[originCellRow][originCellCol];\n    currentCell.isRevealed = true;\n    if (currentCell.mineNeighbours === 0) {\n      updatedBoard = revealNeighbours(updatedBoard, currentCell);\n    }\n    return updatedBoard;\n  };\n\n  const revealNeighbours = (updatedBoard, originCell) => {\n    const originRow = originCell.cellRow;\n    const originCol = originCell.cellCol;\n    for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n      let cellRow = originRow + xOffSet;\n      if (cellRow < 0 || cellRow >= totalRows) continue;\n      for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n        let cellCol = originCol + yOffSet;\n        if (cellCol < 0 || cellCol >= totalCols) continue;\n        let cellToCheck = updatedBoard[cellRow][cellCol];\n        if (\n          !cellToCheck.isRevealed &&\n          !cellToCheck.isMine &&\n          !cellToCheck.isFlagged\n        ) {\n          revealCellAux(updatedBoard, cellToCheck.cellRow, cellToCheck.cellCol);\n        }\n      }\n    }\n    return updatedBoard;\n  };\n\n  const renderBoard = () =>\n    board &&\n    board.map((row, i) =>\n      row.map((cell, j) => (\n        <div key={`${i},${j}`}>\n          <Cell\n            cellRow={i}\n            cellCol={j}\n            isMine={cell.isMine}\n            mineNeighbours={cell.mineNeighbours}\n            isRevealed={cell.isRevealed}\n            isFlagged={cell.isFlagged}\n            isLostTrigger={cell.isLostTrigger}\n            missedMark={cell.missedMark}\n            clickHandler={clickHandler}\n            touchHandler={updateBoardAfterInteraction}\n          />\n        </div>\n      ))\n    );\n\n  return (\n    <Fragment>\n      <Alert alert={alert} />\n      <div className='container'>\n        <FlagCounter remainingFlags={remainingFlags} />\n      </div>\n      <div\n        className='game-board'\n        style={{\n          gridTemplateColumns: `repeat(${totalCols}, ${CELL_SIZE}px)`,\n        }}\n      >\n        {renderBoard()}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default GameBoard;\n","export const getGameFreezeFromDS = () =>\n  localStorage.getItem(\"gameFreeze\") === \"true\";\n\nexport const getRemainingFlagsFromDS = () =>\n  parseInt(localStorage.getItem(\"remainingFlags\"));\n\nexport const getNumberOfCorrectFlagsFromDS = () =>\n  parseInt(localStorage.getItem(\"numberOfCorrectFlags\"));\n\nexport const getTotalRowsFromDS = () =>\n  parseInt(localStorage.getItem(\"totalRows\"));\n\nexport const getTotalColsFromDS = () =>\n  parseInt(localStorage.getItem(\"totalCols\"));\n\nexport const getTotalMinesFromDS = () =>\n  parseInt(localStorage.getItem(\"totalMines\"));\n\nexport const getBoardTimestampFromDS = () =>\n  localStorage.getItem(\"boardTimestamp\");\n\nexport const getIsRevealModeFromDS = () =>\n  localStorage.getItem(\"isRevealMode\") === \"true\";\n\nexport const setGameFreezeToDS = (newValue) =>\n  localStorage.setItem(\"gameFreeze\", newValue);\n\nexport const setRemainingFlagsToDS = (newValue) =>\n  localStorage.setItem(\"remainingFlags\", newValue);\n\nexport const setNumberOfCorrectFlagsToDS = (newValue) =>\n  localStorage.setItem(\"numberOfCorrectFlags\", newValue);\n\nexport const setTotalRowsToDS = (newTotalRows) =>\n  localStorage.setItem(\"totalRows\", newTotalRows);\n\nexport const setTotalColsToDS = (newTotalCols) =>\n  localStorage.setItem(\"totalCols\", newTotalCols);\n\nexport const setTotalMinesToDS = (newTotalMines) =>\n  localStorage.setItem(\"totalMines\", newTotalMines);\n\nexport const setBoardTimestampToDS = (newTimestamp) =>\n  localStorage.setItem(\"boardTimestamp\", newTimestamp);\n\nexport const setIsRevealModeToDS = (newIsRevealMode) =>\n  localStorage.setItem(\"isRevealMode\", newIsRevealMode);\n\nexport const clearDS = () => {\n  localStorage.clear();\n};\n","import {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_TOTAL_ROWS:\n      return {\n        ...state,\n        totalRows: action.payload,\n      };\n    case SET_TOTAL_COLS:\n      return {\n        ...state,\n        totalCols: action.payload,\n      };\n    case SET_TOTAL_MINES:\n      return {\n        ...state,\n        totalMines: action.payload,\n      };\n    case SET_BOARD_TIMESTAMP:\n      return {\n        ...state,\n        boardTimestamp: action.payload,\n      };\n    case SET_IS_REVEAL_MODE:\n      return {\n        ...state,\n        isRevealMode: action.payload,\n      };\n    default:\n      return;\n  }\n};\n","export const SET_TOTAL_ROWS = \"SET_TOTAL_ROWS\";\nexport const SET_TOTAL_COLS = \"SET_TOTAL_COLS\";\nexport const SET_TOTAL_MINES = \"SET_TOTAL_MINES\";\nexport const SET_BOARD_TIMESTAMP = \"SET_BOARD_TIMESTAMP\";\nexport const SET_IS_REVEAL_MODE = \"SET_IS_REVEAL_MODE\";\n","import React, { useReducer } from \"react\";\nimport GameInfoContext from \"./GameInfoContext\";\nimport GameInfoReducer from \"./GameInfoReducer\";\nimport {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\nimport {\n  DEFAULT_TOTAL_ROWS,\n  DEFAULT_TOTAL_COLS,\n  DEFAULT_TOTAL_MINES,\n} from \"../../components/Utils/GameConstans\";\nimport {\n  getTotalRowsFromDS,\n  getTotalColsFromDS,\n  getTotalMinesFromDS,\n  getBoardTimestampFromDS,\n  getIsRevealModeFromDS,\n  setTotalRowsToDS,\n  setTotalColsToDS,\n  setTotalMinesToDS,\n  setBoardTimestampToDS,\n  setIsRevealModeToDS,\n} from \"../../components/Utils/DataStorage\";\n// import GameInfoForm from \"../../components/GameInfoForm\";\n\nconst GameInfoState = (props) => {\n  // Default Values\n  const initialState = {\n    totalRows: DEFAULT_TOTAL_ROWS,\n    totalCols: DEFAULT_TOTAL_COLS,\n    totalMines: DEFAULT_TOTAL_MINES,\n    boardTimestamp: new Date().getTime(),\n    isRevealMode: false,\n  };\n  const [state, dispatch] = useReducer(GameInfoReducer, initialState);\n\n  const getTotalRows = () => {\n    const totalRows = getTotalRowsFromDS();\n    return totalRows ? totalRows : state.totalRows;\n  };\n\n  const getTotalCols = () => {\n    const totalCols = getTotalColsFromDS();\n    return totalCols ? totalCols : state.totalCols;\n  };\n\n  const getTotalMines = () => {\n    const totalMines = getTotalMinesFromDS();\n    return totalMines ? totalMines : state.totalMines;\n  };\n\n  const getBoardTimestamp = () => {\n    const boardTimestamp = getBoardTimestampFromDS();\n    return boardTimestamp ? boardTimestamp : state.boardTimestamp;\n  };\n\n  const getIsRevealMode = () => {\n    const isRevealMode = getIsRevealModeFromDS();\n    return isRevealMode ? isRevealMode : state.isRevealMode;\n  };\n\n  const setTotalRows = (newTotalRows) => {\n    setTotalRowsToDS(newTotalRows);\n    dispatch({ type: SET_TOTAL_ROWS, payload: newTotalRows });\n  };\n  const setTotalCols = (newTotalCols) => {\n    setTotalColsToDS(newTotalCols);\n    dispatch({ type: SET_TOTAL_COLS, payload: newTotalCols });\n  };\n  const setTotalMines = (newTotalMines) => {\n    setTotalMinesToDS(newTotalMines);\n    dispatch({ type: SET_TOTAL_MINES, payload: newTotalMines });\n  };\n  const setBoardTimestamp = (newTimestamp) => {\n    setBoardTimestampToDS(newTimestamp);\n    dispatch({ type: SET_BOARD_TIMESTAMP, payload: newTimestamp });\n  };\n  const setIsRevealMode = (newIsRevealMode) => {\n    setIsRevealModeToDS(newIsRevealMode);\n    dispatch({ type: SET_IS_REVEAL_MODE, payload: newIsRevealMode });\n  };\n\n  return (\n    <GameInfoContext.Provider\n      value={{\n        getTotalRows,\n        getTotalCols,\n        getTotalMines,\n        getBoardTimestamp,\n        getIsRevealMode,\n        setTotalRows,\n        setTotalCols,\n        setTotalMines,\n        setBoardTimestamp,\n        setIsRevealMode,\n      }}\n    >\n      {props.children}\n    </GameInfoContext.Provider>\n  );\n};\n\nexport default GameInfoState;\n","import React, { useState, useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst GameInfoForm = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n\n  const [totalRows, setTotalRows] = useState(gameInfoContext.getTotalRows());\n  const [totalCols, setTotalCols] = useState(gameInfoContext.getTotalCols());\n  const [totalMines, setTotalMines] = useState(gameInfoContext.getTotalMines());\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    gameInfoContext.setTotalRows(parseInt(totalRows));\n    gameInfoContext.setTotalCols(parseInt(totalCols));\n    gameInfoContext.setTotalMines(parseInt(totalMines));\n    localStorage.removeItem(\"board\");\n    gameInfoContext.setBoardTimestamp(new Date().getTime());\n  };\n\n  const onChangeRows = (e) => setTotalRows(e.target.value);\n  const onChangeCols = (e) => setTotalCols(e.target.value);\n  const onChangeMines = (e) => setTotalMines(e.target.value);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className='row'>\n        <div className='col-md-8 col-centered mx-auto'>\n          <div className='row'>\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-align-justify' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalRowsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalRows}\n                  onChange={onChangeRows}\n                  aria-label='Rows'\n                />\n              </div>\n            </div>\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i\n                      className='fa fa-align-justify fa-rotate-90'\n                      aria-hidden='true'\n                    />\n                  </span>\n                </div>\n                <input\n                  id='totalColsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalCols}\n                  onChange={onChangeCols}\n                  aria-label='Cols'\n                />\n              </div>\n            </div>\n\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-bomb' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalMinesInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max={totalRows * totalCols}\n                  value={totalMines}\n                  onChange={onChangeMines}\n                  aria-label='Mines'\n                />\n              </div>\n            </div>\n            <div className='col-md-3 mb-1'>\n              <button className='btn btn-success btn-block' type='submit'>\n                New Game\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default GameInfoForm;\n","import React from \"react\";\n\nconst HowToPlay = () => {\n  return (\n    <div className='continer text-center mb-3'>\n      <h4 className='text-light'>How To Play</h4>\n      <span className='text-light mr-2 d-none d-sm-inline'>\n        Click to reveal a cell.\n      </span>\n      <span className='text-light mr-2 d-block d-sm-none'>\n        Touch to reveal a cell.\n      </span>\n      <span className='text-light mr-2 d-none d-sm-inline'>\n        Shift + Click to set a flag.\n      </span>\n      <span className='text-light mr-2 d-block d-sm-none'>\n        Touch Longer to set a flag.\n      </span>\n      <span className='text-light'>Flag all mines for the win!</span>\n    </div>\n  );\n};\n\nexport default HowToPlay;\n","import React from \"react\";\nimport Navbar from \"./components/layout/Navbar/Navbar\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport GameInfoState from \"./context/GameInfo/GameInfoState\";\nimport \"./MinesweeperApp.css\";\nimport GameInfoForm from \"./components/GameInfoForm/GameInfoForm\";\nimport HowToPlay from \"./components/layout/HowToPlay/HowToPlay\";\nimport { clearDS } from \"./components/Utils/DataStorage\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    clearDS();\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div className='container'>\n          <h1 className='text-white'>Something went wrong.</h1>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nconst MinesweeperApp = () => {\n  return (\n    <ErrorBoundary>\n      <GameInfoState>\n        <div className='minesweeperApp'>\n          <Navbar />\n          <div className='container mt-3'>\n            <GameInfoForm />\n          </div>\n          <div className='container jumbotron text-center mt-3 py-4 dark-background'>\n            <div className='container game-board-container'>\n              <GameBoard />\n            </div>\n          </div>\n          <HowToPlay />\n        </div>\n      </GameInfoState>\n    </ErrorBoundary>\n  );\n};\n\nexport default MinesweeperApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MinesweeperApp from \"./MinesweeperApp\";\n\nReactDOM.render(<MinesweeperApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}