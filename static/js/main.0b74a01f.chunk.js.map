{"version":3,"sources":["context/GameInfo/GameInfoContext.js","components/RevealMode/RevealMode.js","components/layout/Navbar/Navbar.js","components/Utils/GameConstans.js","components/Cell/Cell.js","components/FlagCounter/FlagCouner.js","components/Alert/Alert.js","components/GameBoard/GameBoard.js","components/Utils/UtilMethods.js","context/GameInfo/GameInfoReducer.js","context/types.js","context/GameInfo/GameInfoState.js","components/GameInfoForm/GameInfoForm.js","components/layout/HowToPlay/HowToPlay.js","MinesweeperApp.js","index.js"],"names":["GameInfoContext","createContext","RevealMode","gameInfoContext","useContext","isRevealMode","getIsRevealMode","className","onClick","setIsRevealMode","Navbar","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","SUCCESS_MESSAGE","header","content","timeout","MINE_MESSAGE","FLAG_MESSAGE","Cell","cellRow","cellCol","isMine","mineNeighbours","isRevealed","isFlagged","isLostTrigger","missedMark","clickHandler","touchHandler","touchHoldTimer","style","width","height","color","e","onTouchStart","setTimeout","handleTochStart","onTouchEnd","clearTimeout","opacity","cursor","display","FlagCouner","remainingFlags","prototype","PropTypes","number","Alert","alert","GameBoard","totalRows","getTotalRows","totalCols","getTotalCols","totalMines","getTotalMines","boardTimestamp","getBoardTimestamp","getLocalStorageBoard","JSON","parse","localStorage","getItem","useState","board","setBoard","gameFreeze","setGameFreeze","parseInt","setRemainingFlags","numberOfCorrectFlags","setNumberOfCorrectFlags","storeAndSetGameFreeze","newValue","setItem","storeAndSetRemainingFlags","storeAndSetNumberOfCorrectFlags","setAlert","triggerAlert","useCallback","useEffect","i","push","j","mineCounter","randomRow","Math","floor","random","randomCol","cell","countNeighboursMines","row","col","totalNeighboursMines","xOffSet","yOffSet","map","_","createBoard","removeItem","stringify","event","updateBoardAfterInteraction","shiftKey","isFlagChange","currentCell","toggleFlag","revealCell","updatedBoard","originCellRow","originCellCol","revealNeighbours","originCell","originRow","originCol","cellToCheck","gridTemplateColumns","key","state","action","payload","GameInfoState","props","initialState","Date","getTime","useReducer","GameInfoReducer","dispatch","Provider","value","localStorageInfo","setTotalRows","newTotalRows","setTotalCols","newTotalCols","setTotalMines","newTotalMines","setBoardTimestamp","newTimestamp","newIsRevealMode","children","GameInfoForm","onSubmit","preventDefault","aria-hidden","min","max","onChange","target","HowToPlay","MinesweeperApp","ReactDOM","render","document","getElementById"],"mappings":"qNAIeA,EAFSC,0BCoBTC,EAnBI,WACjB,IAAMC,EAAkBC,qBAAWJ,GAC7BK,EAAeF,EAAgBG,kBAKrC,OACE,4BACEC,UAAS,uDACPF,EAAe,SAAW,IAE5BG,QATqB,WACvBL,EAAgBM,iBAAiBJ,KAU/B,uBAAGE,UAAU,cANf,sBCgBWG,EAxBA,WACb,OACE,yBAAKH,UAAU,+CACb,uBAAGA,UAAU,eAAeI,KAAK,MAC/B,uBAAGJ,UAAU,eADf,wBAGA,4BACEA,UAAU,2BACVK,KAAK,SACLC,cAAY,WACZC,cAAY,kBACZC,gBAAc,iBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMV,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BW,GAAG,kBAC3C,kBAAC,EAAD,S,qBCbKC,G,MAAkB,CAC7BC,OAAQ,aACRC,QACE,4CAEE,uBAAGd,UAAU,uBAGjBK,KAAM,UACNU,QAAS,OAGEC,EAAe,CAC1BH,OAAQ,UACRC,QACE,4CAEE,uBAAGd,UAAU,qBAGjBK,KAAM,SACNU,QAAS,MAGEE,EAAe,CAC1BJ,OAAQ,gBACRC,QACE,6EAEE,uBAAGd,UAAU,qBAGjBK,KAAM,YACNU,QAAS,KCoDIG,EAvFF,SAAC,GAWP,IAVLC,EAUI,EAVJA,QACAC,EASI,EATJA,QACAC,EAQI,EARJA,OACAC,EAOI,EAPJA,eACAC,EAMI,EANJA,WACAC,EAKI,EALJA,UACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAwBM9B,EADkBD,qBAAWJ,GACEM,kBAEjC8B,EAAiB,KAYrB,OACE,yBACE7B,UAAS,gCA1BPyB,EACK,SAELC,EACK,YAEF,WAqBLI,MAAO,CACLC,MDpDiB,GCqDjBC,ODrDiB,KCwDnB,8BA3CEX,EACK,uBAAGrB,UAAU,qBACXwB,EACF,uBAAGxB,UAAU,cAAc8B,MAAO,CAAEG,MAAO,aACzCX,EAAiB,EACnB,kBAAC,WAAD,KAAWA,GAEb,MAqCL,4BACEtB,UAAU,2BACVC,QAAS,SAACiC,GAAD,OAAOP,EAAaO,EAAGf,EAASC,IACzCe,aAAc,kBAtBI,SAAChB,EAASC,GAChCS,EAAiBO,YAAW,WAC1BR,GAAa,EAAMT,EAASC,KAC3B,KAmBqBiB,CAAgBlB,EAASC,IAC7CkB,WAjBgB,WACpBC,aAAaV,IAiBTC,MAAO,CACLU,QAASjB,EAAa,EAAIzB,EAAe,GAAM,EAC/C2C,OAAQlB,EAAa,OAAS,UAC9BmB,QAAS,UAGVlB,EAAY,uBAAGxB,UAAU,eAAkB,Q,eCvE9C2C,EAAa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACpB,OACE,kBAAC,WAAD,KACE,yBAAK5C,UAAU,gBACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,QACZ,gCAAS4C,GACT,uBAAG5C,UAAU,yBAQzB2C,EAAWE,UAAY,CACrBD,e,OAAgBE,EAAUC,QAGbJ,QCHAK,EAhBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACY,OAAVA,GACE,yBAAKjD,UAAU,gBACb,yBAAKA,UAAS,sBAAiBiD,EAAM5C,OACnC,gCAAS4C,EAAMpC,QADjB,IACmCoC,EAAMnC,WCkOlCoC,EAtNG,WAChB,IAAMtD,EAAkBC,qBAAWJ,GAC7B0D,EAAYvD,EAAgBwD,eAC5BC,EAAYzD,EAAgB0D,eAC5BC,EAAa3D,EAAgB4D,gBAC7BC,EAAiB7D,EAAgB8D,oBAEjCC,EAAuB,kBAAMC,KAAKC,MAAMC,aAAaC,QAAQ,WAP7C,EASIC,mBAASL,GATb,mBASfM,EATe,KASRC,EATQ,OAUcF,mBACK,SAAvCF,aAAaC,QAAQ,gBAA4B,GAX7B,mBAUfI,EAVe,KAUHC,EAVG,OAasBJ,mBAC1CK,SAASP,aAAaC,QAAQ,oBAAsBR,GAdhC,mBAafX,EAbe,KAaC0B,EAbD,OAgBkCN,mBACtDK,SAASP,aAAaC,QAAQ,0BAA4B,GAjBtC,mBAgBfQ,EAhBe,KAgBOC,EAhBP,KAoBhBC,EAAwB,SAACC,GAC7BZ,aAAaa,QAAQ,aAAcD,GACnCN,EAAcM,IAGVE,EAA4B,SAACF,GACjCZ,aAAaa,QAAQ,iBAAkBD,GACvCJ,EAAkBI,IAGdG,EAAkC,SAACH,GACvCZ,aAAaa,QAAQ,uBAAwBD,GAC7CF,EAAwBE,IAhCJ,EAmCIV,mBAAS,MAnCb,mBAmCff,EAnCe,KAmCR6B,EAnCQ,KAoChBC,EAAeC,uBAAY,YAAyC,IAAtCnE,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,QAAST,EAAoB,EAApBA,KAAMU,EAAc,EAAdA,QACzD+D,EAAS,CAAEjE,SAAQC,UAAST,SACxBU,EAAU,GACZqB,YAAW,kBAAM0C,EAAS,QAAO/D,KAElC,IAEHkE,qBAAU,WAGDtB,MACHO,ECnEmB,SAACf,EAAWE,EAAWE,GAGhD,IAFA,IAAIU,EAAQ,GAEHiB,EAAI,EAAGA,EAAI/B,EAAW+B,IAAK,CAClCjB,EAAMkB,KAAK,IACX,IAAK,IAAIC,EAAI,EAAGA,EAAI/B,EAAW+B,IAC7BnB,EAAMiB,GAAGC,KAAK,CACZhE,QAAS+D,EACT9D,QAASgE,EACT7D,YAAY,EACZF,QAAQ,EACRG,WAAW,EACXC,eAAe,EACfC,YAAY,EACZJ,eAAgB,IAOtB,IADA,IAAI+D,EAAc,EApB6C,aAsB7D,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWtC,GACvCuC,EAAYH,KAAKC,MAAMD,KAAKE,SAAWpC,GACvCsC,EAAO1B,EAAMqB,GAAWI,GACzBC,EAAKtE,SACR4C,EAAMqB,GAAWI,GAAjB,eACKC,EADL,CAEEtE,QAAQ,IAEVgE,KAGF,IAAMO,EAAuB,SAACC,EAAKC,GACjC,GAAI7B,EAAM4B,GAAKC,GAAKzE,OAClB,OAAQ,EAGV,IADA,IAAI0E,EAAuB,EAClBC,GAAW,EAAGA,GAAW,EAAGA,IAAW,CAC9C,IAAI7E,EAAU0E,EAAMG,EACpB,KAAI7E,EAAU,GAAKA,GAAWgC,GAC9B,IAAK,IAAI8C,GAAW,EAAGA,GAAW,EAAGA,IAAW,CAC9C,IAAI7E,EAAU0E,EAAMG,EAChB7E,EAAU,GAAKA,GAAWiC,GAC1BY,EAAM9C,GAASC,GAASC,QAC1B0E,KAIN,OAAOA,GAIT9B,EAAMiC,KAAI,SAACL,EAAKX,GAAN,OACRW,EAAIK,KACF,SAACC,EAAGf,GAAJ,OACGnB,EAAMiB,GAAGE,GAAT,eACInB,EAAMiB,GAAGE,GADb,CAEC9D,eAAgBsE,EAAqBV,EAAGE,YArC3CC,EAAc9B,GAAa,IA0ClC,OAAOU,EDIQmC,CAAYjD,EAAWE,EAAWE,IAC3CqB,EAA0BrB,GAC1BsB,EAAgC,GAChCJ,GAAsB,GACtBK,EAAS,MACThB,aAAauC,WAAW,YAG3B,CAAClD,EAAWE,EAAWE,EAAYE,IAEtCwB,qBAAU,WACRnB,aAAaa,QAAQ,QAASf,KAAK0C,UAAUrC,MAC5C,CAACA,IAGJgB,qBAAU,WACJV,IAAyBhB,IAC3BwB,EAAanE,GACb6D,GAAsB,MAEvB,CAACF,EAAsBhB,EAAYwB,IAEtC,IAoBMpD,EAAe,SAAC4E,EAAOpF,EAASC,GACpCoF,EAA4BD,EAAME,SAAUtF,EAASC,IAGjDoF,EAA8B,SAACE,EAAcvF,EAASC,GAC1D,IAAMuF,EAAc1C,EAAM9C,GAASC,GACnC,IAAI+C,IAAcwC,EAAYpF,WAG9B,GAAImF,EACFE,EAAWzF,EAASC,QAGtB,IAAIuF,EAAYnF,UAGhB,OAAImF,EAAYtF,QACd0D,EAAa/D,GACb2F,EAAYlF,eAAgB,EAC5ByC,EAtCc,YAAOD,GACHiC,KAAI,SAACL,GAAD,OACtBA,EAAIK,KAAI,SAACP,GACP,OACGA,EAAKtE,SAAWsE,EAAKnE,WACrBmE,EAAKnE,YAAcmE,EAAKtE,OAElB,eACFsE,EADL,CAEEpE,YAAY,EACZG,YAAY,IAGPiE,cA0BXlB,GAAsB,SAGnBkC,EAAYnF,WACfqF,EAAW1F,EAASC,KAIlBwF,EAAa,SAACf,EAAKC,GACvB,IAAIgB,EAAY,YAAO7C,GACjB0C,EAAcG,EAAajB,GAAKC,GACtC,GAAIa,EAAYnF,UAEdoD,EAA0BhC,EAAiB,GACvC+D,EAAYtF,QACdwD,EAAgCN,EAAuB,OAEpD,CAEL,KAAI3B,EAAiB,GAOnB,YADAmC,EAAa9D,GALb2D,EAA0BhC,EAAiB,GACvC+D,EAAYtF,QACdwD,EAAgCN,EAAuB,GAQ7DuC,EAAajB,GAAKC,GAAKtE,WAAasF,EAAajB,GAAKC,GAAKtE,UAC3D0C,EAAS4C,IAGLD,EAAa,SAACE,EAAeC,GACjC,IAAIF,EAAY,YAAO7C,GACnB0C,EAAcG,EAAaC,GAAeC,GAC9CL,EAAYpF,YAAa,EACU,IAA/BoF,EAAYrF,iBACdwF,EAAeG,EAAiBH,EAAcH,IAEhDzC,EAAS4C,IAGLG,EAAmB,SAACH,EAAcI,GAGtC,IAFA,IAAMC,EAAYD,EAAW/F,QACvBiG,EAAYF,EAAW9F,QACpB4E,GAAW,EAAGA,GAAW,EAAGA,IAAW,CAC9C,IAAI7E,EAAUgG,EAAYnB,EAC1B,KAAI7E,EAAU,GAAKA,GAAWgC,GAC9B,IAAK,IAAI8C,GAAW,EAAGA,GAAW,EAAGA,IAAW,CAC9C,IAAI7E,EAAUgG,EAAYnB,EAC1B,KAAI7E,EAAU,GAAKA,GAAWiC,GAA9B,CACA,IAAIgE,EAAcP,EAAa3F,GAASC,GAErCiG,EAAY9F,YACZ8F,EAAYhG,QACZgG,EAAY7F,WAEbqF,EAAWQ,EAAYlG,QAASkG,EAAYjG,WAIlD,OAAO0F,GAwBT,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CAAO7D,MAAOA,IACd,yBAAKjD,UAAU,aACb,kBAAC,EAAD,CAAa4C,eAAgBA,KAE/B,yBACE5C,UAAU,aACV8B,MAAO,CACLwF,oBAAoB,UAAD,OAAYjE,EAAZ,aJ3NJ,GI2NI,SA7BzBY,GACAA,EAAMiC,KAAI,SAACL,EAAKX,GAAN,OACRW,EAAIK,KAAI,SAACP,EAAMP,GAAP,OACN,yBAAKmC,IAAG,UAAKrC,EAAL,YAAUE,IAChB,kBAAC,EAAD,CACEjE,QAAS+D,EACT9D,QAASgE,EACT/D,OAAQsE,EAAKtE,OACbC,eAAgBqE,EAAKrE,eACrBC,WAAYoE,EAAKpE,WACjBC,UAAWmE,EAAKnE,UAChBC,cAAekE,EAAKlE,cACpBC,WAAYiE,EAAKjE,WACjBC,aAAcA,EACdC,aAAc4E,cE1MX,WAACgB,EAAOC,GACrB,OAAQA,EAAOpH,MACb,ICV0B,iBDWxB,OAAO,eACFmH,EADL,CAEErE,UAAWsE,EAAOC,UAEtB,ICd0B,iBDexB,OAAO,eACFF,EADL,CAEEnE,UAAWoE,EAAOC,UAEtB,IClB2B,kBDmBzB,OAAO,eACFF,EADL,CAEEjE,WAAYkE,EAAOC,UAEvB,ICtB+B,sBDuB7B,OAAO,eACFF,EADL,CAEE/D,eAAgBgE,EAAOC,UAE3B,IC1B8B,qBD2B5B,OAAO,eACFF,EADL,CAEE1H,aAAc2H,EAAOC,UAEzB,QACE,SEyDSC,EA5EO,SAACC,GAErB,IAAMC,EAAe,CACnB1E,URlB8B,EQmB9BE,URlB8B,EQmB9BE,WRlB+B,GQmB/BE,gBAAgB,IAAIqE,MAAOC,UAC3BjI,cAAc,GAPe,EASLkI,qBAAWC,EAAiBJ,GATvB,mBASxBL,EATwB,KASjBU,EATiB,KAwD/B,OACE,kBAAC,EAAgBC,SAAjB,CACEC,MAAO,CACLhF,aAhDe,WACnB,IAAIiF,EAAmBhE,SAASP,aAAaC,QAAQ,cACrD,OAAOsE,GAAsCb,EAAMrE,WA+C/CG,aA5Ce,WACnB,IAAI+E,EAAmBhE,SAASP,aAAaC,QAAQ,cACrD,OAAOsE,GAAsCb,EAAMnE,WA2C/CG,cAxCgB,WACpB,IAAI6E,EAAmBhE,SAASP,aAAaC,QAAQ,eACrD,OAAOsE,GAAsCb,EAAMjE,YAuC/CG,kBApCoB,WACxB,IAAI2E,EAAmBvE,aAAaC,QAAQ,kBAC5C,OAAOsE,GAAsCb,EAAM/D,gBAmC/C1D,gBAjCkB,WACtB,IAAIsI,EAA4D,SAAzCvE,aAAaC,QAAQ,gBAC5C,OAAOsE,GAAsCb,EAAM1H,cAgC/CwI,aA7Be,SAACC,GACpBzE,aAAaa,QAAQ,YAAa4D,GAClCL,EAAS,CAAE7H,KDtDe,iBCsDOqH,QAASa,KA4BtCC,aA1Be,SAACC,GACpB3E,aAAaa,QAAQ,YAAa8D,GAClCP,EAAS,CAAE7H,KDzDe,iBCyDOqH,QAASe,KAyBtCC,cAvBgB,SAACC,GACrB7E,aAAaa,QAAQ,aAAcgE,GACnCT,EAAS,CAAE7H,KD5DgB,kBC4DOqH,QAASiB,KAsBvCC,kBApBoB,SAACC,GACzB/E,aAAaa,QAAQ,iBAAkBkE,GACvCX,EAAS,CAAE7H,KD/DoB,sBC+DOqH,QAASmB,KAmB3C3I,gBAjBkB,SAAC4I,GACvBhF,aAAaa,QAAQ,eAAgBmE,GACrCZ,EAAS,CAAE7H,KDlEmB,qBCkEOqH,QAASoB,OAkB3ClB,EAAMmB,WCaEC,G,MAlGM,WACnB,IAAMpJ,EAAkBC,qBAAWJ,GADV,EAGSuE,mBAASpE,EAAgBwD,gBAHlC,mBAGlBD,EAHkB,KAGPmF,EAHO,OAIStE,mBAASpE,EAAgB0D,gBAJlC,mBAIlBD,EAJkB,KAIPmF,EAJO,OAKWxE,mBAASpE,EAAgB4D,iBALpC,mBAKlBD,EALkB,KAKNmF,EALM,KAoBzB,OACE,0BAAMO,SAdS,SAAC/G,GAChBA,EAAEgH,iBACFtJ,EAAgB0I,aAAajE,SAASlB,IACtCvD,EAAgB4I,aAAanE,SAAShB,IACtCzD,EAAgB8I,cAAcrE,SAASd,IACvCO,aAAauC,WAAW,SACxBzG,EAAgBgJ,mBAAkB,IAAId,MAAOC,aAS3C,yBAAK/H,UAAU,OACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBACd,uBAAGA,UAAU,sBAAsBmJ,cAAY,WAGnD,2BACExI,GAAG,iBACHX,UAAU,eACVK,KAAK,SACL+I,IAAI,IACJC,IAAI,MACJjB,MAAOjF,EACPmG,SAvBK,SAACpH,GAAD,OAAOoG,EAAapG,EAAEqH,OAAOnB,QAwBlC1H,aAAW,WAIjB,yBAAKV,UAAU,YACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBACd,uBACEA,UAAU,mCACVmJ,cAAY,WAIlB,2BACExI,GAAG,iBACHX,UAAU,eACVK,KAAK,SACL+I,IAAI,IACJC,IAAI,MACJjB,MAAO/E,EACPiG,SA5CK,SAACpH,GAAD,OAAOsG,EAAatG,EAAEqH,OAAOnB,QA6ClC1H,aAAW,WAKjB,yBAAKV,UAAU,YACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,oBACd,uBAAGA,UAAU,aAAamJ,cAAY,WAG1C,2BACExI,GAAG,kBACHX,UAAU,eACVK,KAAK,SACL+I,IAAI,IACJC,IAAKlG,EAAYE,EACjB+E,MAAO7E,EACP+F,SA/DM,SAACpH,GAAD,OAAOwG,EAAcxG,EAAEqH,OAAOnB,QAgEpC1H,aAAW,YAIjB,yBAAKV,UAAU,iBACb,4BAAQA,UAAU,4BAA4BK,KAAK,UAAnD,mBCnECmJ,EArBG,WAChB,OACE,yBAAKxJ,UAAU,6BACb,wBAAIA,UAAU,cAAd,eACA,0BAAMA,UAAU,sCAAhB,2BAGA,0BAAMA,UAAU,qCAAhB,2BAGA,0BAAMA,UAAU,sCAAhB,gCAGA,0BAAMA,UAAU,qCAAhB,+BAGA,0BAAMA,UAAU,cAAhB,iCCSSyJ,EAnBQ,WACrB,OACE,kBAAC,EAAD,KACE,yBAAKzJ,UAAU,kBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,kBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,6DACb,yBAAKA,UAAU,kCACb,kBAAC,EAAD,QAGJ,kBAAC,EAAD,SCjBR0J,IAASC,OAAO,kBAAC,EAAD,MAAoBC,SAASC,eAAe,U","file":"static/js/main.0b74a01f.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GameInfoContext = createContext();\n\nexport default GameInfoContext;\n","import React, { useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst RevealMode = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.getIsRevealMode();\n  const toggleRevealMode = () => {\n    gameInfoContext.setIsRevealMode(!isRevealMode);\n  };\n\n  return (\n    <button\n      className={`btn btn-outline-success my-2 my-sm-0 ml-auto ${\n        isRevealMode ? \"active\" : \"\"\n      }`}\n      onClick={toggleRevealMode}\n    >\n      <i className='fa fa-eye' /> Reveal All Cells\n    </button>\n  );\n};\n\nexport default RevealMode;\n","import React from \"react\";\nimport RevealMode from \"../../RevealMode/RevealMode\";\n\nconst Navbar = () => {\n  return (\n    <nav className='navbar navbar-expand-md navbar-dark bg-dark'>\n      <a className='navbar-brand' href='/#'>\n        <i className='fa fa-bomb' /> ReactJS Minesweeper\n      </a>\n      <button\n        className='navbar-toggler collapsed'\n        type='button'\n        data-toggle='collapse'\n        data-target='#navbarCollapse'\n        aria-controls='navbarCollapse'\n        aria-expanded='false'\n        aria-label='Toggle navigation'\n      >\n        <span className='navbar-toggler-icon'></span>\n      </button>\n      <div className='navbar-collapse collapse' id='navbarCollapse'>\n        <RevealMode />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nexport const DEFAULT_TOTAL_ROWS = 9;\nexport const DEFAULT_TOTAL_COLS = 9;\nexport const DEFAULT_TOTAL_MINES = 10;\n\nexport const CELL_SIZE = 30;\n\nexport const SUCCESS_MESSAGE = {\n  header: \"Mazal Tov!\",\n  content: (\n    <span>\n      You did it!\n      <i className='fa fa-trophy ml-1' />\n    </span>\n  ),\n  type: \"success\",\n  timeout: null,\n};\n\nexport const MINE_MESSAGE = {\n  header: \"Oy Vey!\",\n  content: (\n    <span>\n      It's a mine\n      <i className='fa fa-bomb ml-1' />\n    </span>\n  ),\n  type: \"danger\",\n  timeout: null,\n};\n\nexport const FLAG_MESSAGE = {\n  header: \"Out Of Flags!\",\n  content: (\n    <span>\n      Try to remove a flag before adding a new one\n      <i className='fa fa-flag ml-1' />\n    </span>\n  ),\n  type: \"secondary\",\n  timeout: 5000,\n};\n","import React, { useContext, Fragment } from \"react\";\nimport \"./Cell.css\";\nimport { CELL_SIZE } from \"../Utils/GameConstans\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport PropTypes from \"prop-types\";\n\nconst Cell = ({\n  cellRow,\n  cellCol,\n  isMine,\n  mineNeighbours,\n  isRevealed,\n  isFlagged,\n  isLostTrigger,\n  missedMark,\n  clickHandler,\n  touchHandler,\n}) => {\n  const renderCell = () => {\n    if (isMine) {\n      return <i className='fa fa-bomb fa-md' />;\n    } else if (isFlagged) {\n      return <i className='fa fa-times' style={{ color: \"#ffb000\" }}></i>;\n    } else if (mineNeighbours > 0) {\n      return <Fragment>{mineNeighbours}</Fragment>;\n    }\n    return null;\n  };\n\n  const getType = () => {\n    if (isLostTrigger) {\n      return \"danger\";\n    }\n    if (missedMark) {\n      return \"secondary\";\n    }\n    return \"primary\";\n  };\n\n  const gameInfoContext = useContext(GameInfoContext);\n  const isRevealMode = gameInfoContext.getIsRevealMode();\n\n  let touchHoldTimer = null;\n\n  const handleTochStart = (cellRow, cellCol) => {\n    touchHoldTimer = setTimeout(() => {\n      touchHandler(true, cellRow, cellCol);\n    }, 500);\n  };\n\n  const handleTochEnd = () => {\n    clearTimeout(touchHoldTimer);\n  };\n\n  return (\n    <div\n      className={`game-cell alert alert-${getType()}`}\n      style={{\n        width: CELL_SIZE,\n        height: CELL_SIZE,\n      }}\n    >\n      <span>{renderCell()}</span>\n      <button\n        className='btn btn-warning game-btn'\n        onClick={(e) => clickHandler(e, cellRow, cellCol)}\n        onTouchStart={() => handleTochStart(cellRow, cellCol)}\n        onTouchEnd={handleTochEnd}\n        style={{\n          opacity: isRevealed ? 0 : isRevealMode ? 0.5 : 1,\n          cursor: isRevealed ? \"auto\" : \"pointer\",\n          display: \"block\",\n        }}\n      >\n        {isFlagged ? <i className='fa fa-flag' /> : null}\n      </button>\n    </div>\n  );\n};\n\nCell.propTypes = {\n  cellRow: PropTypes.number,\n  cellCol: PropTypes.number,\n  isMine: PropTypes.bool,\n  mineNeighbours: PropTypes.number,\n  isRevealed: PropTypes.bool,\n  isFlagged: PropTypes.bool,\n  isLostTrigger: PropTypes.bool,\n  missedMark: PropTypes.bool,\n  clickHandler: PropTypes.func,\n  touchHandler: PropTypes.func,\n};\n\nexport default Cell;\n","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FlagCouner = ({ remainingFlags }) => {\n  return (\n    <Fragment>\n      <div className='bs-component'>\n        <div className='alert'>\n          <h3 className='mr-1'>\n            <strong>{remainingFlags}</strong>\n            <i className='fa fa-flag ml-1' />\n          </h3>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nFlagCouner.prototype = {\n  remainingFlags: PropTypes.number,\n};\n\nexport default FlagCouner;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Alert = ({ alert }) => {\n  return (\n    alert !== null && (\n      <div className='bs-component'>\n        <div className={`alert alert-${alert.type}`}>\n          <strong>{alert.header}</strong> {alert.content}\n        </div>\n      </div>\n    )\n  );\n};\n\nAlert.propTypes = {\n  alert: PropTypes.object,\n};\n\nexport default Alert;\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  Fragment,\n  useCallback,\n} from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\nimport Cell from \"../Cell/Cell\";\nimport \"./GameBoard.css\";\nimport {\n  CELL_SIZE,\n  SUCCESS_MESSAGE,\n  MINE_MESSAGE,\n  FLAG_MESSAGE,\n} from \"../Utils/GameConstans\";\nimport { createBoard } from \"../Utils/UtilMethods\";\nimport FlagCounter from \"../FlagCounter/FlagCouner\";\nimport Alert from \"../Alert/Alert\";\n\nconst GameBoard = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n  const totalRows = gameInfoContext.getTotalRows();\n  const totalCols = gameInfoContext.getTotalCols();\n  const totalMines = gameInfoContext.getTotalMines();\n  const boardTimestamp = gameInfoContext.getBoardTimestamp();\n\n  const getLocalStorageBoard = () => JSON.parse(localStorage.getItem(\"board\"));\n\n  const [board, setBoard] = useState(getLocalStorageBoard);\n  const [gameFreeze, setGameFreeze] = useState(\n    localStorage.getItem(\"gameFreeze\") === \"true\" || false\n  );\n  const [remainingFlags, setRemainingFlags] = useState(\n    parseInt(localStorage.getItem(\"remainingFlags\")) || totalMines\n  );\n  const [numberOfCorrectFlags, setNumberOfCorrectFlags] = useState(\n    parseInt(localStorage.getItem(\"numberOfCorrectFlags\")) || 0\n  );\n\n  const storeAndSetGameFreeze = (newValue) => {\n    localStorage.setItem(\"gameFreeze\", newValue);\n    setGameFreeze(newValue);\n  };\n\n  const storeAndSetRemainingFlags = (newValue) => {\n    localStorage.setItem(\"remainingFlags\", newValue);\n    setRemainingFlags(newValue);\n  };\n\n  const storeAndSetNumberOfCorrectFlags = (newValue) => {\n    localStorage.setItem(\"numberOfCorrectFlags\", newValue);\n    setNumberOfCorrectFlags(newValue);\n  };\n\n  const [alert, setAlert] = useState(null);\n  const triggerAlert = useCallback(({ header, content, type, timeout }) => {\n    setAlert({ header, content, type });\n    if (timeout > 0) {\n      setTimeout(() => setAlert(null), timeout);\n    }\n  }, []);\n\n  useEffect(() => {\n    (() => {\n      //Reset board\n      if (!getLocalStorageBoard()) {\n        setBoard(createBoard(totalRows, totalCols, totalMines));\n        storeAndSetRemainingFlags(totalMines);\n        storeAndSetNumberOfCorrectFlags(0);\n        storeAndSetGameFreeze(false);\n        setAlert(null);\n        localStorage.removeItem(\"board\");\n      }\n    })();\n  }, [totalRows, totalCols, totalMines, boardTimestamp]);\n\n  useEffect(() => {\n    localStorage.setItem(\"board\", JSON.stringify(board));\n  }, [board]);\n\n  // Check if it's a win\n  useEffect(() => {\n    if (numberOfCorrectFlags === totalMines) {\n      triggerAlert(SUCCESS_MESSAGE);\n      storeAndSetGameFreeze(true);\n    }\n  }, [numberOfCorrectFlags, totalMines, triggerAlert]);\n\n  const revealAllMines = () => {\n    let updatedBoard = [...board];\n    return updatedBoard.map((row) =>\n      row.map((cell) => {\n        if (\n          (cell.isMine && !cell.isFlagged) ||\n          (cell.isFlagged && !cell.isMine)\n        ) {\n          return {\n            ...cell,\n            isRevealed: true,\n            missedMark: true,\n          };\n        } else {\n          return cell;\n        }\n      })\n    );\n  };\n\n  const clickHandler = (event, cellRow, cellCol) => {\n    updateBoardAfterInteraction(event.shiftKey, cellRow, cellCol);\n  };\n\n  const updateBoardAfterInteraction = (isFlagChange, cellRow, cellCol) => {\n    const currentCell = board[cellRow][cellCol];\n    if (gameFreeze || currentCell.isRevealed) {\n      return;\n    }\n    if (isFlagChange) {\n      toggleFlag(cellRow, cellCol);\n      return;\n    }\n    if (currentCell.isFlagged) {\n      return;\n    }\n    if (currentCell.isMine) {\n      triggerAlert(MINE_MESSAGE);\n      currentCell.isLostTrigger = true;\n      setBoard(revealAllMines());\n      storeAndSetGameFreeze(true);\n      return;\n    }\n    if (!currentCell.isFlagged) {\n      revealCell(cellRow, cellCol);\n    }\n  };\n\n  const toggleFlag = (row, col) => {\n    let updatedBoard = [...board];\n    const currentCell = updatedBoard[row][col];\n    if (currentCell.isFlagged) {\n      // Remove Flag\n      storeAndSetRemainingFlags(remainingFlags + 1);\n      if (currentCell.isMine) {\n        storeAndSetNumberOfCorrectFlags(numberOfCorrectFlags - 1);\n      }\n    } else {\n      // Set New Flag\n      if (remainingFlags > 0) {\n        storeAndSetRemainingFlags(remainingFlags - 1);\n        if (currentCell.isMine) {\n          storeAndSetNumberOfCorrectFlags(numberOfCorrectFlags + 1);\n        }\n      } else {\n        triggerAlert(FLAG_MESSAGE);\n        return;\n      }\n    }\n    // Toggle flag indication\n    updatedBoard[row][col].isFlagged = !updatedBoard[row][col].isFlagged;\n    setBoard(updatedBoard);\n  };\n\n  const revealCell = (originCellRow, originCellCol) => {\n    let updatedBoard = [...board];\n    let currentCell = updatedBoard[originCellRow][originCellCol];\n    currentCell.isRevealed = true;\n    if (currentCell.mineNeighbours === 0) {\n      updatedBoard = revealNeighbours(updatedBoard, currentCell);\n    }\n    setBoard(updatedBoard);\n  };\n\n  const revealNeighbours = (updatedBoard, originCell) => {\n    const originRow = originCell.cellRow;\n    const originCol = originCell.cellCol;\n    for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n      let cellRow = originRow + xOffSet;\n      if (cellRow < 0 || cellRow >= totalRows) continue;\n      for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n        let cellCol = originCol + yOffSet;\n        if (cellCol < 0 || cellCol >= totalCols) continue;\n        let cellToCheck = updatedBoard[cellRow][cellCol];\n        if (\n          !cellToCheck.isRevealed &&\n          !cellToCheck.isMine &&\n          !cellToCheck.isFlagged\n        ) {\n          revealCell(cellToCheck.cellRow, cellToCheck.cellCol);\n        }\n      }\n    }\n    return updatedBoard;\n  };\n\n  const renderBoard = () =>\n    board &&\n    board.map((row, i) =>\n      row.map((cell, j) => (\n        <div key={`${i},${j}`}>\n          <Cell\n            cellRow={i}\n            cellCol={j}\n            isMine={cell.isMine}\n            mineNeighbours={cell.mineNeighbours}\n            isRevealed={cell.isRevealed}\n            isFlagged={cell.isFlagged}\n            isLostTrigger={cell.isLostTrigger}\n            missedMark={cell.missedMark}\n            clickHandler={clickHandler}\n            touchHandler={updateBoardAfterInteraction}\n          />\n        </div>\n      ))\n    );\n\n  return (\n    <Fragment>\n      <Alert alert={alert} />\n      <div className='container'>\n        <FlagCounter remainingFlags={remainingFlags} />\n      </div>\n      <div\n        className='game-board'\n        style={{\n          gridTemplateColumns: `repeat(${totalCols}, ${CELL_SIZE}px)`,\n        }}\n      >\n        {renderBoard()}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default GameBoard;\n","export const createBoard = (totalRows, totalCols, totalMines) => {\n  let board = [];\n  // Init board cells\n  for (let i = 0; i < totalRows; i++) {\n    board.push([]);\n    for (let j = 0; j < totalCols; j++) {\n      board[i].push({\n        cellRow: i,\n        cellCol: j,\n        isRevealed: false,\n        isMine: false,\n        isFlagged: false,\n        isLostTrigger: false,\n        missedMark: false,\n        mineNeighbours: 0,\n      });\n    }\n  }\n\n  // Set mines\n  let mineCounter = 0;\n  while (mineCounter < totalMines) {\n    const randomRow = Math.floor(Math.random() * totalRows);\n    const randomCol = Math.floor(Math.random() * totalCols);\n    const cell = board[randomRow][randomCol];\n    if (!cell.isMine) {\n      board[randomRow][randomCol] = {\n        ...cell,\n        isMine: true,\n      };\n      mineCounter++;\n    }\n\n    const countNeighboursMines = (row, col) => {\n      if (board[row][col].isMine) {\n        return -1;\n      }\n      let totalNeighboursMines = 0;\n      for (let xOffSet = -1; xOffSet <= 1; xOffSet++) {\n        let cellRow = row + xOffSet;\n        if (cellRow < 0 || cellRow >= totalRows) continue;\n        for (let yOffSet = -1; yOffSet <= 1; yOffSet++) {\n          let cellCol = col + yOffSet;\n          if (cellCol < 0 || cellCol >= totalCols) continue;\n          if (board[cellRow][cellCol].isMine) {\n            totalNeighboursMines++;\n          }\n        }\n      }\n      return totalNeighboursMines;\n    };\n\n    // Set neightbours mines values\n    board.map((row, i) =>\n      row.map(\n        (_, j) =>\n          (board[i][j] = {\n            ...board[i][j],\n            mineNeighbours: countNeighboursMines(i, j),\n          })\n      )\n    );\n  }\n  return board;\n};\n","import {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_TOTAL_ROWS:\n      return {\n        ...state,\n        totalRows: action.payload,\n      };\n    case SET_TOTAL_COLS:\n      return {\n        ...state,\n        totalCols: action.payload,\n      };\n    case SET_TOTAL_MINES:\n      return {\n        ...state,\n        totalMines: action.payload,\n      };\n    case SET_BOARD_TIMESTAMP:\n      return {\n        ...state,\n        boardTimestamp: action.payload,\n      };\n    case SET_IS_REVEAL_MODE:\n      return {\n        ...state,\n        isRevealMode: action.payload,\n      };\n    default:\n      return;\n  }\n};\n","export const SET_TOTAL_ROWS = \"SET_TOTAL_ROWS\";\nexport const SET_TOTAL_COLS = \"SET_TOTAL_COLS\";\nexport const SET_TOTAL_MINES = \"SET_TOTAL_MINES\";\nexport const SET_BOARD_TIMESTAMP = \"SET_BOARD_TIMESTAMP\";\nexport const SET_IS_REVEAL_MODE = \"SET_IS_REVEAL_MODE\";\n","import React, { useReducer } from \"react\";\nimport GameInfoContext from \"./GameInfoContext\";\nimport GameInfoReducer from \"./GameInfoReducer\";\nimport {\n  SET_TOTAL_ROWS,\n  SET_TOTAL_COLS,\n  SET_TOTAL_MINES,\n  SET_BOARD_TIMESTAMP,\n  SET_IS_REVEAL_MODE,\n} from \"../types\";\nimport {\n  DEFAULT_TOTAL_ROWS,\n  DEFAULT_TOTAL_COLS,\n  DEFAULT_TOTAL_MINES,\n} from \"../../components/Utils/GameConstans\";\n// import GameInfoForm from \"../../components/GameInfoForm\";\n\nconst GameInfoState = (props) => {\n  // Default Values\n  const initialState = {\n    totalRows: DEFAULT_TOTAL_ROWS,\n    totalCols: DEFAULT_TOTAL_COLS,\n    totalMines: DEFAULT_TOTAL_MINES,\n    boardTimestamp: new Date().getTime(),\n    isRevealMode: false,\n  };\n  const [state, dispatch] = useReducer(GameInfoReducer, initialState);\n\n  const getTotalRows = () => {\n    let localStorageInfo = parseInt(localStorage.getItem(\"totalRows\"));\n    return localStorageInfo ? localStorageInfo : state.totalRows;\n  };\n\n  const getTotalCols = () => {\n    let localStorageInfo = parseInt(localStorage.getItem(\"totalCols\"));\n    return localStorageInfo ? localStorageInfo : state.totalCols;\n  };\n\n  const getTotalMines = () => {\n    let localStorageInfo = parseInt(localStorage.getItem(\"totalMines\"));\n    return localStorageInfo ? localStorageInfo : state.totalMines;\n  };\n\n  const getBoardTimestamp = () => {\n    let localStorageInfo = localStorage.getItem(\"boardTimestamp\");\n    return localStorageInfo ? localStorageInfo : state.boardTimestamp;\n  };\n  const getIsRevealMode = () => {\n    let localStorageInfo = localStorage.getItem(\"isRevealMode\") === \"true\";\n    return localStorageInfo ? localStorageInfo : state.isRevealMode;\n  };\n\n  const setTotalRows = (newTotalRows) => {\n    localStorage.setItem(\"totalRows\", newTotalRows);\n    dispatch({ type: SET_TOTAL_ROWS, payload: newTotalRows });\n  };\n  const setTotalCols = (newTotalCols) => {\n    localStorage.setItem(\"totalCols\", newTotalCols);\n    dispatch({ type: SET_TOTAL_COLS, payload: newTotalCols });\n  };\n  const setTotalMines = (newTotalMines) => {\n    localStorage.setItem(\"totalMines\", newTotalMines);\n    dispatch({ type: SET_TOTAL_MINES, payload: newTotalMines });\n  };\n  const setBoardTimestamp = (newTimestamp) => {\n    localStorage.setItem(\"boardTimestamp\", newTimestamp);\n    dispatch({ type: SET_BOARD_TIMESTAMP, payload: newTimestamp });\n  };\n  const setIsRevealMode = (newIsRevealMode) => {\n    localStorage.setItem(\"isRevealMode\", newIsRevealMode);\n    dispatch({ type: SET_IS_REVEAL_MODE, payload: newIsRevealMode });\n  };\n\n  return (\n    <GameInfoContext.Provider\n      value={{\n        getTotalRows,\n        getTotalCols,\n        getTotalMines,\n        getBoardTimestamp,\n        getIsRevealMode,\n        setTotalRows,\n        setTotalCols,\n        setTotalMines,\n        setBoardTimestamp,\n        setIsRevealMode,\n      }}\n    >\n      {props.children}\n    </GameInfoContext.Provider>\n  );\n};\n\nexport default GameInfoState;\n","import React, { useState, useContext } from \"react\";\nimport GameInfoContext from \"../../context/GameInfo/GameInfoContext\";\n\nconst GameInfoForm = () => {\n  const gameInfoContext = useContext(GameInfoContext);\n\n  const [totalRows, setTotalRows] = useState(gameInfoContext.getTotalRows());\n  const [totalCols, setTotalCols] = useState(gameInfoContext.getTotalCols());\n  const [totalMines, setTotalMines] = useState(gameInfoContext.getTotalMines());\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    gameInfoContext.setTotalRows(parseInt(totalRows));\n    gameInfoContext.setTotalCols(parseInt(totalCols));\n    gameInfoContext.setTotalMines(parseInt(totalMines));\n    localStorage.removeItem(\"board\");\n    gameInfoContext.setBoardTimestamp(new Date().getTime());\n  };\n\n  const onChangeRows = (e) => setTotalRows(e.target.value);\n  const onChangeCols = (e) => setTotalCols(e.target.value);\n  const onChangeMines = (e) => setTotalMines(e.target.value);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <div className='row'>\n        <div className='col-md-8 col-centered mx-auto'>\n          <div className='row'>\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-align-justify' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalRowsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalRows}\n                  onChange={onChangeRows}\n                  aria-label='Rows'\n                />\n              </div>\n            </div>\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i\n                      className='fa fa-align-justify fa-rotate-90'\n                      aria-hidden='true'\n                    />\n                  </span>\n                </div>\n                <input\n                  id='totalColsInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max='300'\n                  value={totalCols}\n                  onChange={onChangeCols}\n                  aria-label='Cols'\n                />\n              </div>\n            </div>\n\n            <div className='col-md-3'>\n              <div className='input-group mb-1'>\n                <div className='input-group-prepend'>\n                  <span className='input-group-text'>\n                    <i className='fa fa-bomb' aria-hidden='true' />\n                  </span>\n                </div>\n                <input\n                  id='totalMinesInput'\n                  className='form-control'\n                  type='number'\n                  min='1'\n                  max={totalRows * totalCols}\n                  value={totalMines}\n                  onChange={onChangeMines}\n                  aria-label='Mines'\n                />\n              </div>\n            </div>\n            <div className='col-md-3 mb-1'>\n              <button className='btn btn-success btn-block' type='submit'>\n                New Game\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default GameInfoForm;\n","import React from \"react\";\n\nconst HowToPlay = () => {\n  return (\n    <div className='continer text-center mb-3'>\n      <h4 className='text-light'>How To Play</h4>\n      <span className='text-light mr-2 d-none d-sm-inline'>\n        Click to reveal a cell.\n      </span>\n      <span className='text-light mr-2 d-block d-sm-none'>\n        Touch to reveal a cell.\n      </span>\n      <span className='text-light mr-2 d-none d-sm-inline'>\n        Shift + Click to set a flag.\n      </span>\n      <span className='text-light mr-2 d-block d-sm-none'>\n        Touch Longer to set a flag.\n      </span>\n      <span className='text-light'>Flag all mines for the win!</span>\n    </div>\n  );\n};\n\nexport default HowToPlay;\n","import React from \"react\";\nimport Navbar from \"./components/layout/Navbar/Navbar\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport GameInfoState from \"./context/GameInfo/GameInfoState\";\nimport \"./MinesweeperApp.css\";\nimport GameInfoForm from \"./components/GameInfoForm/GameInfoForm\";\nimport HowToPlay from \"./components/layout/HowToPlay/HowToPlay\";\n\nconst MinesweeperApp = () => {\n  return (\n    <GameInfoState>\n      <div className='minesweeperApp'>\n        <Navbar />\n        <div className='container mt-3'>\n          <GameInfoForm />\n        </div>\n        <div className='container jumbotron text-center mt-3 py-4 dark-background'>\n          <div className='container game-board-container'>\n            <GameBoard />\n          </div>\n        </div>\n        <HowToPlay />\n      </div>\n    </GameInfoState>\n  );\n};\n\nexport default MinesweeperApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MinesweeperApp from \"./MinesweeperApp\";\n\nReactDOM.render(<MinesweeperApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}